openapi: 3.0.3
info:
  version: 1.0.0
  title: Toast API
  description: >-
    ## Authentication API


    The authentication API returns an authentication token that you can present

    when your integration client software uses other Toast APIs. For more

    information about authentication, see [the Toast Developer

    Guide](https://doc.toasttab.com/doc/devguide/authentication.html).


    ## Menus API


    Returns information about a restaurant's menus.


    _Important:_ Ordering integrations should use menus API V3. Other integration types should continue to use menus API V2 until further notice. See <a href="https://doc.toasttab.com/doc/devguide/apiComparingMenusAPIV2AndV3.html">Comparing menus API V2 and V3</a> for more information.


    ## Orders API


    The orders API includes operations that create, update, and retrieve information about restaurant

    guest orders.


    Information on orders includes the checks, items ordered,

    prices, payments, discounts, and customer data.


    You can create a new order. The orders API includes an operation to retrieve the order prices before you `POST` the order.


    You can add items to an existing check.


    The orders API also allows you to retrieve payment information for the order and add a credit card payment to the order.

    You cannot update an existing payment, but you can update the tip amount.


    For delivery orders, you can update the delivery information.


    You can retrieve the applicable discounts for an order, and then add a discount to a menu item selection or a check.


    The orders API supports email addresses that: 
      - Are up to 53 characters long. 
      - Start with the email prefix, ends with the email domain name, where the prefix and domain are separated by an @. 
      - Use the following supported characters:
        - a-z
        - A-Z
        - 0-9
        - _ (underscore)
        - International characters are not supported

    ## Labor API


    Toast labor API is a set of REST web services that you can use to 

    manage the employees, jobs, and shifts for your restaurant. The 

    labor API is intended for software engineers, managers, and 

    technical staff who are responsible for integrating third-party 

    systems with the Toast platform.

    ## Restaurants API


    Returns information about the configuration of restaurant.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://pos.toasttab.com/api-terms-of-use
  contact:
    name: Toast developer support
externalDocs:
  description: Authentication developer guide
  url: https://doc.toasttab.com/doc/devguide/authentication.html
servers:
  - url: https://ws-sandbox-api.eng.toasttab.com
    description: Toast Sandbox API
  - url: https://oauth.toasttab.com
    description: Toast Production API
tags:
  - name: Authentication
  - name: Orders
    description: |
      Related to orders made by restaurant guests. For example, a restaurant
      guest orders items from a menu. Toast platform orders include one or
      more guest check.
  - name: Payments
    description: |
      Related to guests' payments for restaurant orders. Toast platform
      payments apply to a check in an order.
  - name: Discounts
    description: |
      Related to price reduction applied to restaurant orders. For example, a
      restaurant might apply a discount for a promotion.
  - name: Employees
  - name: Jobs
  - name: Shifts
  - name: Time entries
  - name: Restaurants
    description: |
      Related to restaurant configuration and information.
  - name: Alternate Payment Types
  - name: Break Types
  - name: Cash Drawers
  - name: Dining Options
  - name: Menu Groups
  - name: Menu Items
  - name: Modifier Groups
  - name: Menus V3
    description: |
      Related to menus API V3. This is the recommended version for ordering integrations.
  - name: Menus V2
    description: |
      Related to menus API V2. Other integration types should continue to use menus API V2 until further notice.
  - name: No Sale Reasons
  - name: Payout Reasons
  - name: Pre Modifier Groups
  - name: Pre Modifiers
  - name: Price Groups
  - name: Printers
  - name: Restaurant Services
  - name: Revenue Centers
  - name: Sales Categories
  - name: Service Areas
  - name: Service Charges
  - name: Tables
  - name: Tax Rates
  - name: Tip Withholding
  - name: Void Reasons
paths:
  /authentication/v1/authentication/login:
    post:
      tags:
        - Authentication
      summary: Get an authentication token
      description: |
        Returns an authentication token that your Toast API client can present
        when using other Toast platform APIs.
      externalDocs:
        description: Authentication developer guide
        url: https://doc.toasttab.com/doc/devguide/authentication.html
      operationId: authenticationLoginPost
      requestBody:
        description: |
          The authentication credentials for your Toast API client integration
          software.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthenticationRequest"
      responses:
        "200":
          description: |
            A JSON `AuthenticationResponse` object that includes an
            authentication token string.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthenticationResponse"
        "401":
          description: |
            The Toast API client credentials in your request are not valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /menus/v3/menus:
    get:
      tags:
        - Menus V3
      operationId: menusV3Get
      summary: Get menus
      description: |
        Get menus
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        "404":
          description:
            No published data was found for the restaurant. Ensure that the
            restaurant GUID is correct and that its data has been published.
        "503":
          description: Unable to retrieve menus for the restaurant due to a service outage.
      security:
        - oauth2:
            - menus.channel:read
  /menus/v3/metadata:
    get:
      tags:
        - Menus V3
      operationId: menusV3MetadataGet
      summary: |
        Get menu last modified timestamp
      description: >
        A lightweight endpoint that allows you to determine if a restaurant's
        menu data has been updated. Toast support strongly recommends that you
        do not make a call to the `/menus` endpoint unless the date and time
        returned by the `/metadata` endpoint is more recent than the
        `lastUpdated` date and time. While this recommendation applies to all
        clients of the menus API, it is particularly important for clients that
        have limited bandwidth.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metadata"
      security:
        - oauth2:
            - menus.channel:read
  /orders/v2/payments:
    get:
      tags:
        - Payments
      summary: Get payment identifiers
      description: |
        Returns a list of the GUIDs for each payment made during
        one restaurant business day.

        The specific hours that make up a business
        day depend on the business day cutoff in the restaurant configuration,
        which is available from the restaurants API in the `closeoutHour`
        property.

        The business day for a restaurant is based on its local time (not UTC
        or local time for an API client).

        You must include one of the
        `paidBusinessDate`, `refundBusinessDate`, or `voidBusinessDate` query
        parameters.
      operationId: paymentsGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The GUID of the restaurant used as the context of the request.
          in: header
          required: true
          schema:
            type: string
        - name: paidBusinessDate
          description: |
            Returns a list of the payments that were made during
            one business day.
            Specify the business day in the format yyyyMMdd.
            For example, `20170101`.
          in: query
          required: false
          schema:
            type: string
        - name: refundBusinessDate
          description: |
            Returns a list of the payments that were refunded
            during one business day.
            Specify the business day in the format
            yyyyMMdd. For example, `20170101`.
          in: query
          required: false
          schema:
            type: string
        - name: voidBusinessDate
          description: |
            Returns a list of the payments that were voided during
            one business day.
            Specify the business day in the format yyyyMMdd.
            For example, `20170101`.
          in: query
          required: false
          schema:
            type: string
      responses:
        "200":
          description: A JSON array of the GUID identifiers for the payments.
          content:
            application/json:
              schema:
                title: Response
                type: array
                items:
                  type: string
        "400":
          description: The API cannot process the request.
      security:
        - oauth2:
            - orders:read
  "/orders/v2/payments/{guid}":
    get:
      tags:
        - Payments
      summary: Get a payment
      description:
        Returns a JSON `Payment` object containing detailed information
        about a  single payment, specified by its GUID.
      operationId: paymentsGuidGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The GUID of the restaurant used as the context of the request.
          in: header
          required: true
          schema:
            type: string
        - name: guid
          description: The GUID for the payment you want to return.
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Returns a JSON `Payment` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "400":
          description: The GUID was malformed.
        "404":
          description: The specified payment was not found.
      security:
        - oauth2:
            - orders:read
  /orders/v2/prices:
    post:
      tags:
        - Orders
      summary: Get order prices
      description: |
        Calculates the check price amounts, tax amounts, and service
        charges for an `Order` object you supply as a _required message
        body parameter_.

        The `prices` endpoint validates the order you
        submit to ensure all referenced data exists and that you include
        item selections in the expected structure with all required modifier
        options.

        Some values that would be present in the response data when
        creating an order are not present in the response data for the `prices`
        endpoint. For example, the order GUID is not set because the
        Toast platform does not create persistent data for the order.

        The calculated price can change between requests to the
        `prices` endpoint with the same `Order` object if enough time
        passes between the requests. The difference in price is
        possible because the restaurant configuration can change and
        because some pricing configuration is based on time and date
        schedules.
      operationId: pricesPost
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The identifier of the restaurant to be used for this price
            calculation.
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: |
          A _required_ JSON `Order` object containing information about
          the checks, item selections, modifier options, and other parts
          of the order.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "200":
          description: |
            Success. The response body contains a JSON `Order` object with
            values for check amounts, taxes, service charges, and other parts
            of the order.

            Because this endpoint only calculates prices,
            no parts of the order persist in the Toast platform. There are no
            GUIDs in the response object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: |
            Either the request contains data that is not supported by
            the current version of the API as described, or the order
            contains an item that is negatively priced.
        "403":
          description: |
            The API client does not have access to the restaurant, the
            API client does not have the `orders:read` scope, or both.
        "404":
          description: |
            An entity referenced in the order does not exist, or
            belongs to a restaurant that the API client is not
            authorized to access.
        "413":
          description: |
            The number of checks in the submitted order exceeds the limit.
        "415":
          description: |
            The request did not have `application/json` in the
            `Content-Type` HTTP header field.
        "500":
          description: |
            An unexpected internal error occurred. The
            `requestId` that is attached to the error can be referenced by
            the Toast support team.
      security:
        - oauth2:
            - orders.orders:write
  "/orders/v2/orders/{guid}":
    get:
      tags:
        - Orders
      summary: Get an order
      description:
        Retrieves detailed information about a single order, specified by
        its GUID.
      operationId: ordersGuidGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier of the restaurant where this order was placed.
          in: header
          required: true
          schema:
            type: string
        - name: guid
          description: The GUID for the order to be returned.
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: A JSON Order object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: The GUID was malformed.
        "404":
          description: The specified order was not found.
        "500":
          description: There was a problem serializing the order entity.
      security:
        - oauth2:
            - orders:read
  /orders/v2/ordersBulk:
    get:
      tags:
        - Orders
      summary: Get multiple orders
      description: |
        Returns an array of `Order` objects containing detailed
        information about all of the orders opened during a period of time.

        You can return the orders for either a specific period of time
        or for one business day.

        * Specify both `startDate` and `endDate` to return the orders
          modified during that period of time.

        * Specify the `businessDate` to return the orders promised
          during that business day.
      operationId: ordersBulkGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The identifier for the restaurant that processed the orders.
          in: header
          required: true
          schema:
            type: string
        - name: startDate
          description: >
            The inclusive start date and time. The results include orders with a
            modified

            date and time that occur at or after the `startDate`,

            but before the `endDate`.


            Use ISO-8601 format for the date and time, including a decimal fraction of

            a second. For example, `2016-01-01T14:13:12.000+0400`. URL encode the date

            and time value.


            The date must be after

            2015-12-01T00:00:00.000+0000.
          in: query
          schema:
            type: string
          required: false
        - name: endDate
          description: >
            The exclusive end date and time. The results exclude any orders that
            have

            a modified date and time that occurs at or after `endDate`.


            Use ISO-8601 format for the date and time, including a decimal

            fraction of a second. For example, `2016-01-01T14:13:12.000+0400`. URL

            encode the date and time value.


            The `endDate` date and time

            must be later than the `startDate` parameter value.
          in: query
          schema:
            type: string
          required: false
        - name: businessDate
          description: |
            The business date that same-day orders opened or that
            scheduled orders are promised, in the format `yyyymmdd`.

            The business day of an order is determined by the time the
            order is opened or promised in the local time zone, and the
            restaurant's business day cutoff time, which is available
            from  the `General` object of the restaurants API in the
            `closeoutHour` property.
          in: query
          schema:
            type: string
          required: false
        - name: pageSize
          description: >
            The maximum number of objects to return in the array. If the

            number of objects selected by your request is greater than

            the `pageSize`, the API uses response pagination for the

            remaining objects.


            The maximum `pageSize` is `100`.


            For more information, see [the _Toast Developer Guide_](https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html).
          in: query
          schema:
            type: integer
          required: false
        - name: page
          description: >
            The sequence number of the set of objects to return in

            paginated response data.


            For example, if you set the

            `pageSize` parameter to `10`, and you set `page` to `2`, the

            API returns a set of objects that starts with the eleventh

            object.


            For more information, see [the _Toast Developer Guide_](https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html).
          in: query
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: |
            A JSON array of `Order` objects for each order processed
            during the period of time that you specify in your request.
          content:
            application/json:
              schema:
                title: Response
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        "400":
          description: |
            The request contains data that is not supported by the API.
        "500":
          description: |
            An unexpected internal error occurred. The
            `requestId` that is attached to this error can be referenced by
            the Toast support team.
      security:
        - oauth2:
            - orders:read
  "/orders/v2/orders/{orderGuid}/checks/{checkGuid}/payments":
    post:
      tags:
        - Payments
      summary: Post payments
      description: >
        Adds one or more payments to a check in an existing order. Include

        information about the payments in an array of `Payment` objects in the

        message body. Specify the Toast platform GUID of the order

        and check in REST path parameters.


        For more information, see <a

        href="https://doc.toasttab.com/doc/devguide/apiAddingPaymentsToACheck.html">

        the _Toast Developer Guide_</a>.
      operationId: ordersChecksPaymentsPost
      parameters:
        - name: orderGuid
          description: |
            The Toast platform identifier of the order that you are
            adding payments to.
          in: path
          required: true
          schema:
            type: string
        - name: checkGuid
          description: |
            The Toast platform identifier of the check that you are
            adding payments to.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >
          An array of JSON `Payment` objects containing information about the
          payments you are adding.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Payment"
      responses:
        "200":
          description: |
            A JSON `Order` object that includes the payments that you added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: The API cannot process the request.
      security:
        - oauth2:
            - orders.payments:write
  "/orders/v2/orders/{orderGuid}/checks/{checkGuid}/payments/{paymentGuid}":
    patch:
      tags:
        - Payments
      summary: Update a tip amount
      description: >
        Updates the tip amount in an existing payment for a check in an

        order. Include the new `tipAmount` value in a `Payment` object

        in the message body.


        This endpoint does not allow any other

        `Payment` object value for a `PATCH` request.


        Specify the Toast

        platform GUID of the order, check, and payment in REST path

        parameters.


        For more information, see <a

        href="https://doc.toasttab.com/doc/devguide/apiUpdatingTipsInAPayment.html">

        the _Toast Developer Guide_</a>.
      operationId: ordersOrderGuidChecksCheckGuidPaymentsPaymentGuidPatch
      parameters:
        - name: orderGuid
          description: |
            The Toast platform identifier of the order that you are
            updating a tip in.
          in: path
          required: true
          schema:
            type: string
        - name: checkGuid
          description: |
            The Toast platform identifier of the check that you are
            updating a tip in.
          in: path
          required: true
          schema:
            type: string
        - name: paymentGuid
          description: |
            The Toast platform identifier of the payment that you are
            updating a tip in.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: |
          A JSON `Payment` object
          containing the `tipAmount` value that will replace any
          existing tip amount for the payment.

          Do not include any
          value other than `tipAmount`.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePaymentRequest"
      responses:
        "200":
          description: |
            A JSON `Order` object
            that includes the tip amount that you updated.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: The API cannot process the request.
      security:
        - oauth2:
            - orders.payments:write
  "/orders/v2/orders/{orderGuid}/checks/{checkGuid}/selections":
    post:
      tags:
        - Orders
      summary: Add items to a check
      description: >
        Adds one or more items to an existing check in an order.


        Include information about the items in an array of `Selection` objects in the

        message body.


        Specify the Toast platform GUID of the order and

        check in REST path parameters.


        For more information, see 

        <a href="https://doc.toasttab.com/doc/devguide/apiAddingItemsToACheck.html">the 

        _Toast Developer Guide_</a>.
      operationId: ordersOrderGuidChecksCheckGuidSelectionsPost
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier of the restaurant.
          in: header
          required: true
          schema:
            type: string
        - name: orderGuid
          description: |
            The Toast platform identifier of the order that you are
            adding items to.
          in: path
          required: true
          schema:
            type: string
        - name: checkGuid
          description: |
            The Toast platform identifier of the check that you are
            adding items to.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >
          An array of JSON `Selection` objects that identify the menu items
          you are adding.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Selection"
      responses:
        "200":
          description: >
            Success. The response body contains the full order JSON, including
            the `Selection` objects with the items from the original check and
            the newly added ones you included.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: |
            The request contains data that is not supported by the API.
        "404":
          description: |
            An entity referenced in the order does not exist at the restaurant.
        "500":
          description: >
            An unexpected internal error occurred. The `requestId` that is
            attached to this error can be referenced by the Toast support team.
      security:
        - oauth2:
            - orders.items:write
  "/orders/v2/orders/{orderGuid}/checks/{checkGuid}/appliedDiscounts":
    post:
      tags:
        - Discounts
      summary: Add check-level discounts
      description: >
        Adds one or more check-level discounts to a check in an

        existing order. Include an array of `Discount` objects in the

        message body.


        For more information, see 

        <a href="https://doc.toasttab.com/doc/devguide/apiDiscountingOrders.html#apiAddingDiscountsToChecks">

        the _Toast Developer Guide_</a>.
      operationId: ordersChecksAppliedDiscountsPost
      parameters:
        - name: orderGuid
          description: |
            The Toast platform identifier of the order that you are
            adding a discount to.
          in: path
          required: true
          schema:
            type: string
        - name: checkGuid
          description: |
            The Toast platform identifier of the check that you are
            adding a discount to.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >
          A JSON array of `AppliedDiscount` objects that identify the
          discounts you are adding.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/AppliedDiscount"
      responses:
        "200":
          description: |
            A JSON `Order` object that includes the discount you added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: The API cannot process the request.
      security:
        - oauth2:
            - orders.discounts:write
  "/orders/v2/orders/{orderGuid}/checks/{checkGuid}/selections/{selectionGuid}/appliedDiscounts":
    post:
      tags:
        - Discounts
      summary: Add item-level discounts
      description: >
        Adds one or more item-level discounts to menu item selections

        in a check in an existing order. Include an array of `Discount` objects in the

        message body.


        For more information, see <a

        href="https://doc.toasttab.com/doc/devguide/apiDiscountingOrders.html#apiAddingDiscountsToChecks">

        the _Toast Developer Guide_</a>.
      operationId: ordersChecksSelectionsAppliedDiscountsPost
      parameters:
        - name: orderGuid
          description: |
            The Toast platform identifier of the order that you are
            adding a discount to.
          in: path
          required: true
          schema:
            type: string
        - name: checkGuid
          description: |
            The Toast platform identifier of the check that you are
            adding a discount to.
          in: path
          required: true
          schema:
            type: string
        - name: selectionGuid
          description: |
            The Toast platform identifier of the menu item selection
            that you are adding a discount to.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >
          A JSON array of `AppliedDiscount` objects that identify the
          discounts you are adding.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/AppliedDiscount"
      responses:
        "200":
          description: |
            A JSON `Order` object that includes the discount you added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: The API cannot process the request.
      security:
        - oauth2:
            - orders.discounts:write
  "/orders/v2/orders/{orderGuid}/deliveryInfo":
    patch:
      tags:
        - Orders
      summary: Update delivery information
      description: >
        Updates the delivery information of an order that uses the `DELIVERY`
        dining option.

        You can use this endpoint to update the delivery time, dispatch time, the

        employee who is delivering the order, the delivery state, or a

        combination of the four.


        Specify the Toast platform GUID of the

        order in the `PATCH` path parameters. Returns a JSON

        `Order` object if successful.


        For more information, see 

        <a href="https://doc.toasttab.com/doc/devguide/apiUpdatingDeliveryInfoForAnOrder.html">

        the _Toast Developer Guide_</a>.
      operationId: ordersOrderGuidDeliveryInfoPatch
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier of the restaurant.
          in: header
          required: true
          schema:
            type: string
        - name: orderGuid
          description: |
            The Toast platform identifier of the order that you are
            updating the delivery information for.
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: >
          A JSON `deliveryInfo` object

          containing the delivery information you want to update for an order.


          You can update the `deliveredDate`, `dispatchedDate`, `deliveryState`, or

          `DeliveryEmployee`.


          These are the only values you can update with this endpoint.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deliveredDate:
                  type: string
                  format: date-time
                  description: |
                    The date on which the order was delivered.
                dispatchedDate:
                  type: string
                  format: date-time
                  description: >
                    The date on which the order was dispatched. If
                    `dispatchedDate` is not specified, it is set to the current
                    system time.
                deliveryState:
                  type: string
                  description: |
                    The delivery state of the order.
                  enum:
                    - PENDING
                    - IN_PROGRESS
                    - PICKED_UP
                    - DELIVERED
                deliveryEmployee:
                  type: string
                  format: UUID
                  description: >
                    The Toast platform identifier of the employee who is
                    delivering the order.
      responses:
        "200":
          description:
            Success. The response body contains the full order JSON, including
            information you updated in the `deliveryInfo` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: |
            The request contains data that is not supported by the API.
      security:
        - oauth2:
            - orders.delivery_info:write
  "/orders/v2/orders/{orderGuid}/void":
    post:
      tags:
        - Orders
      summary: Void an order
      description: >
        Voids an order, and (if specified) its selections and payments. Only
        Orders with `OTHER` payment types can be voided.


        A request body that contains the `selections` and `payments` objects with each `voidAll` value set to `true` is required to void an order. The response body is the modified Order object.


        For more information, see [Void an order](https://doc.toasttab.com/doc/devguide/apiVoidOrder.html).
      operationId: voidOrder
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier of the restaurant.
          in: header
          required: true
          schema:
            type: string
        - name: orderGuid
          in: path
          required: true
          schema:
            type: string
          description: The GUID of the order to be voided.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                selections:
                  type: object
                  properties:
                    voidAll:
                      type: boolean
                      default: false
                payments:
                  type: object
                  properties:
                    voidAll:
                      type: boolean
                      default: false
      responses:
        "200":
          description: Modified order object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: |
            Malformed order GUID or other validation errors.
        "404":
          description: Order not found.
      security:
        - oauth2:
            - orders:void
            - orders.channel:void
  /orders/v2/orders:
    post:
      tags:
        - Orders
      summary: Post an order
      description:
        Submits an order to the server. Returns a JSON `Order` object if
        successful.
      operationId: ordersPost
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant where this order was placed.
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: A JSON object containing information about an order.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
              example:
                entityType: Order
                diningOption:
                  guid: 18855a26-40d4-4a8f-b484-c6af211dd597
                  entityType: DiningOption
                marketplaceFacilitatorTaxInfo:
                  facilitatorCollectAndRemitTaxOrder: true
                checks:
                  - entityType: Check
                    displayNumber: pdesjardins-api-1627646263
                    selections:
                      - entityType: MenuItemSelection
                        itemGroup:
                          guid: 881472e6-dd94-48c6-b5c6-25e51a864208
                          entityType: MenuGroup
                        item:
                          entityType: MenuItem
                          guid: 9c59d4ab-8242-450f-8f36-b16e1b3ab802
                        quantity: 1
                        modifiers: []
                    customer:
                      entityType: Customer
                      firstName: Severe
                      lastName: Thibault
                      phone: 555-555-5555
                      email: severe@example.com
                    payments:
                      - otherPayment:
                          guid: 0dc19214-d29e-4ab9-a773-27e5812999c7
                        type: OTHER
                        amount: 8.5
                        tipAmount: "0"
                deliveryInfo:
                  address1: 401 Park Drive
                  address2: Suite 801
                  city: Boston
                  state: MA
                  zipCode: "02215"
                  latitude: 42.3446671
                  longitude: -71.1023575
                  notes: Please ring the doorbell.
      responses:
        "200":
          description:
            A JSON `Order` object that has been persisted in Toast. The
            returned Order contains generated property values for the check
            amounts, taxes, service charges, and GUIDs for persisted entities.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
              examples:
                example:
                  summary: Example Order Response
                  value:
                    orders:
                      - guid: 89488287-f259-435b-a654-0bc391596af0
                        entityType: Order
                        externalId: null
                        revenueCenter: null
                        server:
                          guid: c89d1e72-1888-469f-a24b-506c66eafab7
                          entityType: RestaurantUser
                          externalId: null
                        lastModifiedDevice:
                          id:
                        source: API
                        voidDate: null
                        duration: null
                        businessDate: 20210730
                        paidDate: null
                        restaurantService: null
                        voided: false
                        estimatedFulfillmentDate: 2021-07-30T12:12:46.235+0000
                        table: null
                        requiredPrepTime: PT15M
                        approvalStatus: NEEDS_APPROVAL
                        deliveryInfo:
                          address1: 401 Park Drive
                          address2: Suite 801
                          city: Boston
                          state: MA
                          zipCode: "02215"
                          latitude: 42.3446671
                          longitude: -71.1023575
                          notes: Please ring the doorbell.
                          deliveredDate: null
                          dispatchedDate: null
                          deliveryEmployee: null
                          deliveryState: null
                        serviceArea: null
                        curbsidePickupInfo: null
                        numberOfGuests: 1
                        diningOption:
                          guid: 18855a26-40d4-4a8f-b484-c6af211dd597
                          entityType: DiningOption
                          externalId: null
                        openedDate: 2021-07-30T11:57:46.235+0000
                        voidBusinessDate: null
                        checks:
                          - guid: cbcb6fd5-d973-4e44-9b91-2abcee5ea6cd
                            entityType: Check
                            externalId: null
                            displayNumber: pdesjardins-api-1627646263
                            payments:
                              - guid: 88642b2d-c359-4b96-bb8e-9cb3f5c2ac6a
                                entityType: OrderPayment
                                externalId: null
                                originalProcessingFee: null
                                server: null
                                cashDrawer: null
                                lastModifiedDevice:
                                  id:
                                refundStatus: NONE
                                type: OTHER
                                voidInfo: null
                                checkGuid: cbcb6fd5-d973-4e44-9b91-2abcee5ea6cd
                                otherPayment:
                                  guid: 0dc19214-d29e-4ab9-a773-27e5812999c7
                                  entityType: AlternatePaymentType
                                  externalId: null
                                paidDate: 2021-07-30T11:57:46.237+0000
                                orderGuid: 89488287-f259-435b-a654-0bc391596af0
                                cardEntryMode: null
                                paymentStatus: CAPTURED
                                amount: 8.5
                                tipAmount: 0
                                amountTendered: null
                                cardType: null
                                houseAccount: null
                                mcaRepaymentAmount: null
                                createdDevice:
                                  id:
                                paidBusinessDate: 20210730
                                last4Digits: null
                                refund: null
                            appliedDiscounts: []
                            lastModifiedDevice:
                              id:
                            voidDate: null
                            paidDate: null
                            appliedLoyaltyInfo: null
                            voided: false
                            paymentStatus: OPEN
                            amount: 5
                            tabName: null
                            taxExempt: false
                            openedDate: 2021-07-30T11:57:46.235+0000
                            totalAmount: 5
                            selections:
                              - guid: 2c8b6ece-c503-4f85-aed7-6a8c6526ba0d
                                entityType: MenuItemSelection
                                externalId: null
                                deferred: false
                                preDiscountPrice: 5
                                voidReason: null
                                optionGroup: null
                                displayName: 蟹餅  CRAB CAKES
                                appliedDiscounts: []
                                modifiers: []
                                seatNumber: -1
                                voidDate: null
                                fulfillmentStatus: NEW
                                optionGroupPricingMode: null
                                salesCategory:
                                  guid: c0915e46-341e-4ec0-b46e-cb87fab729fd
                                  entityType: SalesCategory
                                  externalId: null
                                selectionType: NONE
                                price: 5
                                voided: false
                                appliedTaxes: []
                                itemGroup:
                                  guid: 881472e6-dd94-48c6-b5c6-25e51a864208
                                  entityType: MenuGroup
                                  externalId: null
                                item:
                                  guid: 9c59d4ab-8242-450f-8f36-b16e1b3ab802
                                  entityType: MenuItem
                                  externalId: null
                                taxInclusion: NOT_INCLUDED
                                quantity: 1
                                receiptLinePrice: 5
                                unitOfMeasure: NONE
                                refundDetails: null
                                tax: 0
                                diningOption:
                                  guid: 18855a26-40d4-4a8f-b484-c6af211dd597
                                  entityType: DiningOption
                                  externalId: null
                                voidBusinessDate: null
                                createdDate: 2021-07-30T11:57:46.269+0000
                                preModifier: null
                                modifiedDate: 2021-07-30T11:57:46.269+0000
                            voidBusinessDate: null
                            createdDate: 2021-07-30T11:57:46.282+0000
                            deleted: false
                            createdDevice:
                              id:
                            closedDate: null
                            deletedDate: null
                            modifiedDate: 2021-07-30T11:57:46.282+0000
                            taxAmount: 0
                            appliedServiceCharges: []
                            customer:
                              guid: 970e92e6-33b3-4caa-876b-2c6ef528ef4e
                              entityType: Customer
                              firstName: Severe
                              lastName: Thibault
                              phone: "5555555555"
                              email: severe@example.com
                        deleted: false
                        createdDevice:
                          id:
                        createdDate: 2021-07-30T11:57:46.286+0000
                        closedDate: null
                        deletedDate: null
                        modifiedDate: 2021-07-30T11:57:46.286+0000
                        promisedDate: null
                        pricingFeatures:
                          - TAXESV2
        "400":
          description:
            Either the request contains data that is not supported by the
            current version of the API as described (e.g. specifying credit card
            as the payment type.), or the order contains an item that is
            negatively priced.
        "404":
          description:
            An entity referenced in the order does not exist, or belongs to a
            restaurant the authenticated client is not authorized to access.
        "413":
          description: The number of checks in the submitted order exceeds the limit.
        "415":
          description:
            The request did not have "application/json" in the Content-Type
            header.
        "500":
          description:
            An unexpected internal error occurred. There is a requestId
            attached to this error that can be referenced by Toast.
      security:
        - oauth2:
            - orders.orders:write
    get:
      tags:
        - Orders
      summary: Get order identifiers (deprecated)
      deprecated: true
      description: |
        Returns a list of the GUIDs of all orders opened during a period of
        time. You can return the list of orders for either a period of up to
        one hour or for one business day.
        * Specify both `startDate` and `endDate` to return the list of orders
          modified during a period of up to one hour.
        * Specify the `businessDate` to return the list of orders promised
          for delivery during a business day.
      operationId: ordersGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant to retrieve orders from.
          in: header
          required: true
          schema:
            type: string
        - name: startDate
          description: >-
            \

            The inclusive start date and time. The results exclude orders with an earlier modified date and time.

            Use ISO-8601 format for the date and time, including a decimal fraction of a second. For example, `2016-01-01T14:13:12.000+0400`. URL encode the date and time value.

            The date must be after 2015-12-01T00:00:00.000+0000.
          in: query
          schema:
            type: string
          required: false
        - name: endDate
          description: >

            The exclusive end date and time. The results exclude orders with an equal

            or later modified date and time.


            Use ISO-8601 format for the date and time, including a decimal

            fraction of a second. For example,

            `2016-01-01T14:13:12.000+0400`. URL encode the date and time value.


            The `endDate` date and time must be later than the `startDate`

            parameter value.
          in: query
          schema:
            type: string
          required: false
        - name: businessDate
          description: >
            The business date that same-day orders opened or that

            scheduled orders are promised, in the format `yyyyMMdd`.


            The business day of an order is determined by the time the order is opened or

            promised in the local time zone, and by the restaurant's business day

            cutoff time, which is available from  the `General` object of the

            restaurants API in the `closeoutHour` property.
          in: query
          schema:
            type: string
          required: false
      responses:
        "200":
          description: A JSON array of the GUID identifiers for orders.
          content:
            application/json:
              schema:
                title: Response
                type: array
                items:
                  type: string
        "400":
          description:
            The request contains data that is not supported by the current
            version of the API as described. For example, specifying credit card
            as the payment type.
        "500":
          description:
            An unexpected internal error occurred. The `requestId` that is
            attached to this error can be referenced by Toast.
      security:
        - oauth2:
            - orders:read
  /orders/v2/applicableDiscounts:
    post:
      tags:
        - Discounts
      summary: Get applicable discounts
      description: |
        Returns an array of `ApplicableDiscount`
        objects that contain information about the discounts that apply
        to the checks and menu item selections in an order.

        Each `ApplicableDiscount` object contains information that you can
        use to determine which items and checks are eligible for the
        discount.

        If you include a `promoCode` value in the
        `ApplicableDiscount` object, the `applicableDiscounts` endpoint
        returns the only the discounts that are associated with that
        promotional code.
      operationId: applicableDiscountsPost
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier of the restaurant.
          in: header
          required: true
          schema:
            type: string
      requestBody:
        description: |
          A JSON `ApplicableDiscountsRequest` object containing
          information about an order, and an optional `promoCode`.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicableDiscountsRequest"
      responses:
        "200":
          description: A JSON array of `ApplicableDiscount` objects.
          content:
            application/json:
              schema:
                title: ApplicableDiscounts
                type: array
                items:
                  $ref: "#/components/schemas/ApplicableDiscount"
        "400":
          description: Invalid arguments
        "500":
          description:
            An unexpected internal error occurred. The `requestId` that is
            attached to this error can be referenced by Toast.
      security:
        - oauth2:
            - orders.orders:write
  /labor/v1/employees:
    get:
      tags:
        - Employees
      summary: Get employees
      description: |
        Returns an array of `Employee` objects containing information 
        about restaurant employees.
      operationId: employeesGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: employeeIds
          description: |
            An optional identifier that filters return values for a 
            specific employee. The identifier can be a Toast platform 
            GUID or an external identifier. If present, the `employees` 
            resource will only return the employees you specify. You 
            can include multiple `employeeIds` query parameters 
            (maximum 100). If not present, the resource returns each 
            employee for the restaurant.
          in: query
          schema:
            type: string
      responses:
        "200":
          description: |
            JSON objects for all employees in the restaurant
          content:
            application/json:
              schema:
                title: Response
                type: array
                items:
                  $ref: "#/components/schemas/Employee"
        "500":
          description: |
            An unexpected internal error occurred. There is a 
            `requestId` attached to this error that can be referenced 
            by Toast support.
      security:
        - oauth2:
            - labor.employees:read
    post:
      tags:
        - Employees
      summary: Add an employee
      description: |
        Creates a restaurant employee record.
      operationId: employeesPost
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: Content-Type
          description: |
            The Internet Assigned Numbers Authority (IANA) media type 
            of the message body data. The value must be 
            `application/json`.
          in: header
          schema:
            type: string
          required: true
      requestBody:
        description: |
          An `Employee` object containing information about the 
          employee, including the employee's name and email address.
        required: true
        content:
          application/json:
            schema:
              type: string
              example:
                entityType: RestaurantUser
                email: email
                firstName: first name
                chosenName: optional chosen name
                lastName: last name
                externalId: optional external ID
                externalEmployeeId: optional external employee ID
                jobReferences":
                  - guid: f290a951-2042-4f3d-b861-d89e9e583876
                    entityType: RestaurantJob
                wageOverrides:
                  - jobReference:
                      guid: f290a951-2042-4f3d-b861-d89e9e583876
                      entityType: RestaurantJob
                    wage: 10
      responses:
        "200":
          description: Returns the created employee.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "400":
          description: |
            The request contains data that is not supported by the 
            current version of the API as described.
        "415":
          description: |
            The request did not have "application/json" in the 
            Content-Type header.
        "500":
          description: |
            An unexpected internal error occurred. There is a requestId 
            attached to this error that can be referenced by Toast 
            support.
      security:
        - oauth2:
            - labor.employees:write
  "/labor/v1/employees/{employeeId}":
    get:
      tags:
        - Employees
      summary: Get information about one employee
      description: |
        Returns an `Employee` object containing information about one 
        restaurant employee.
      operationId: employeesEmployeeIdGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: employeeId
          description: |
            The Toast platform GUID or external identifier for the 
            employee to be returned.
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: |
            Returns the employee information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "400":
          description: |
            The GUID or external identifier was malformed.
        "404":
          description: |
            The GUID or external identifier does not match any 
            employees at the current restaurant.
        "500":
          description: |
            An unexpected internal error occurred. There is a 
            `requestId` attached to this error that can be referenced 
            by Toast support.
      security:
        - oauth2:
            - labor.employees:read
    delete:
      tags:
        - Employees
      summary: Delete an employee
      description: |
        Deletes a restaurant employee record by marking the record as 
        deleted. A deleted employee cannot log in at the restaurant or 
        open new time entries.

        If you `GET` an employee record that has been deleted, its 
        `deleted` value is `true` and its `deletedDate` value contains 
        the date and time the record was deleted. 

        If you delete an employee that has already been deleted then 
        the result is successful (200) and no change is made.

        The deleted record appears in the list of deleted employees for 
        the restaurant in Toast Web. From the 
        list of deleted employees, you can enable a deleted record so 
        that the employee can use it again. Information about deleted 
        employees remains available in reports.

        You cannot delete employees who have open time entries (time 
        entries that do not have an out date value).
      operationId: employeesEmployeeIdDelete
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: employeeId
          description: |
            The Toast platform GUID or external identifier for the 
            employee to be deleted.
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: |
            The employee has been deleted. Returns an `Employee` object 
            containing information about the deleted restaurant 
            employee.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "400":
          description: |
            The GUID or external identifier was malformed.
        "404":
          description: |
            The GUID or external identifier does not match any
            employees at the current restaurant.
        "500":
          description: |
            An unexpected internal error occurred. There is a 
            `requestId` attached to this error that can be referenced 
            by Toast support.
      security:
        - oauth2:
            - labor.employees:write
    patch:
      tags:
        - Employees
      summary: Update employee information
      description: >
        Updates the first name, chosen name, last name, external employee ID,
        and/or 

        passcode of a restaurant employee. The `PATCH` operation cannot 

        update any other employee information.
      operationId: employeesEmployeeIdPatch
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: Content-Type
          description: |
            The Internet Assigned Numbers Authority (IANA) media type 
            of the message body data. The value must be 
            `application/json`.
          in: header
          schema:
            type: string
          required: true
        - name: employeeId
          description: |
            The Toast platform GUID or external identifier for the 
            employee to be returned.
          in: path
          schema:
            type: string
          required: true
      requestBody:
        description: |
          A JSON object containing the employee information that you 
          are updating. You can update an employee's:

          * `firstName` - First name.

          * `chosenName` - Chosen name.

          * `lastName` - Last name.

          * `externalEmployeeId` - External employee identifier.

          * `passcode` - The passcode for access to Toast POS devices.

          All values are optional. You must include at least one 
          value. Each value that you include must contain information 
          (not null). If you include the `passcode` value to update 
          an employee's passcode you must include the employee's 
          current passcode in the `currentPasscode` value.
        required: true
        content:
          application/json:
            schema:
              type: string
              example:
                firstName: Mynewfirstname
                chosenName: Mynewchosenname
                lastName: Mynewlastname
                externalEmployeeId: "1234567890"
                passcode: "1234"
                currentPasscode: "1111"
      responses:
        "200":
          description: |
            Returns the updated Toast platform employee record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "400":
          description: |
            The Toast platform GUID or external identifier was 
            malformed, or the body of the request was malformed.
        "404":
          description: |
            The Toast platform GUID or external identifier does not 
            match any employees at the current restaurant.
        "500":
          description: |
            An unexpected internal error occurred. There is a 
            `requestId` attached to this error that can be referenced 
            by Toast support.
      security:
        - oauth2:
            - labor.employees:write
  "/labor/v1/employees/{employeeId}/externalId":
    parameters:
      - name: employeeId
        description: |
          The Toast platform GUID of the employee record.
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - Employees
      summary: Add an external identifier
      description: |
        Adds an external identifier for an existing employee. Include 
        the string value of the new external identifier in the message 
        body.

        You cannot change an existing external identifier with another 
        `POST` request; use `PUT` instead. The Toast platform uses this 
        external identifier as one of the unique, persistent 
        identifiers for an employee record.
      operationId: employeesEmployeeIdExternalIdPost
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: Content-Type
          description: |
            The Internet Assigned Numbers Authority (IANA) media type 
            of the message body data. The value must be 
            `application/json`.
          in: header
          schema:
            type: string
          required: true
      requestBody:
        description: |
          The JSON string value of the `externalId` for the employee 
          record. Wrap the value in double quotation marks to make it 
          valid JSON syntax.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: MyToastNamingAuthority:9876543210
      responses:
        "200":
          description: |
            Returns the updated employee record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
      security:
        - oauth2:
            - labor.employees:write
    put:
      tags:
        - Employees
      summary: Add or replace an external identifier
      description: |
        Adds or replaces the external identifier for an
        existing employee. Include the string value of the new external
        identifier in the message body.

        The Toast platform uses this external identifier as one of the 
        unique, persistent identifiers for an employee record. 
        _Changing the external identifier for an existing employee 
        might affect reporting and other Toast platform functions that 
        select employees using the `externalId` value._
      operationId: employeesEmployeeIdExternalIdPut
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: Content-Type
          description: |
            The Internet Assigned Numbers Authority (IANA) media type 
            of the message body data. The value must be 
            `application/json`.
          in: header
          schema:
            type: string
          required: true
      requestBody:
        description: |
          The JSON string value of the `externalId` for the employee 
          record. Wrap the value in double quotation marks to make it 
          valid JSON syntax.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: MyToastNamingAuthority:9876543210
      responses:
        "200":
          description: |
            Returns the updated employee record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
      security:
        - oauth2:
            - labor.employees:write
  "/labor/v1/employees/{employeeId}/unarchive":
    parameters:
      - name: employeeId
        description: |
          The Toast platform GUID of the employee record.
        in: path
        schema:
          type: string
        required: true
    put:
      tags:
        - Employees
      summary: Unarchive an employee
      description: |
        Unarchives an employee record that was previously archived.

        * Unarchived employees can sign into the Toast POS.
        * Unarchived employees can sign in to Toast Web. 
        * When you unarchive an employee, the employee has all 
          jobs that were previously assigned to them.
        * If an employee had a swipe card for signing into the 
          Toast POS, the swipe card _is not_ re-associated with 
          the employee when you unarchive them.

        If you unarchive an employee who will take a different 
        role than the one they had when they were archived, you 
        must update the employee's jobs list and verify that the 
        employee should continue to sign into Toast Web.
      operationId: employeesEmployeeIdUnarchivePut
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: Content-Type
          description: |
            The Internet Assigned Numbers Authority (IANA) media type 
            of the message body data. The value must be 
            `application/json`.
          in: header
          schema:
            type: string
          required: true
      responses:
        "200":
          description: |
            Returns the updated employee record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        "400":
          description: |
            Employee being unarchived is not currently archived.
      security:
        - oauth2:
            - labor.employees:write
  "/labor/v1/employees/{employeeId}/jobs":
    parameters:
      - name: employeeId
        description: |
          The Toast platform GUID of the employee record.
        in: path
        schema:
          type: string
        required: true
    put:
      tags:
        - Employees
      summary: Replace a jobs list
      description: |
        Replaces the list of jobs for an employee. Include a JSON  
        array of job identifiers in the message body.

        If a job is defined at the restaurant group or subgroup level, 
        this operation adds or removes that job for the the employee at 
        _all restaurant locations_ in the group or subgroup.
      operationId: employeesEmployeeIdJobsPut
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: Content-Type
          description: |
            The Internet Assigned Numbers Authority (IANA) media type 
            of the message body data. The value must be 
            `application/json`.
          in: header
          schema:
            type: string
          required: true
      requestBody:
        description: |
          An array of JSON objects containing identifiers for jobs. 
          The identifiers can be either Toast platform GUIDs or 
          external identifiers.
        required: true
        content:
          application/json:
            schema:
              type: string
              example:
                - guid: dd8cea7a-add5-4508-b8fe-ffd0b584e4da
                - externalId: MyToastNamingAuthority:9876543210
      responses:
        "200":
          description: |
            Returns the updated employee record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
      security:
        - oauth2:
            - labor.employees:write
  "/labor/v1/employees/{employeeId}/wageOverrides":
    parameters:
      - name: employeeId
        description: |
          The Toast platform GUID of the employee record.
        in: path
        schema:
          type: string
        required: true
    put:
      tags:
        - Employees
      summary: Replace wage overrides
      description: |
        Replaces the list of wage overrides for the jobs that are 
        assigned to an employee. Include a JSON  array of 
        `JobWageOverride` objects in the message body. Include the new 
        wage for the employee in the `wage` value. Specify the wage in 
        U.S. dollars.

        You must include all existing wage overrides in the message 
        body. Any wage overrides that are not present in the array are 
        removed from the employee record.
      operationId: employeesEmployeeIdWageOverridesPut
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: Content-Type
          description: |
            The Internet Assigned Numbers Authority (IANA) media type 
            of the message body data. The value must be 
            `application/json`.
          in: header
          schema:
            type: string
          required: true
      requestBody:
        description: |
          An array of JSON `JobWageOverride` objects.
        required: true
        content:
          application/json:
            schema:
              type: string
              example:
                - jobReference:
                    guid: 8d3bba92-10e4-4345-9ae6-ed94c09dc332
                  wage: 15.75
      responses:
        "200":
          description: |
            The wage overrides for the employee are replaced. Returns 
            the updated employee record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
      security:
        - oauth2:
            - labor.employees:write
  /labor/v1/shifts:
    get:
      tags:
        - Shifts
      summary: Get shifts
      description: |
        Returns an array of `Shift` objects that contain information 
        about schedule shifts for restaurant employees.
      operationId: shiftsGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: shiftIds
          description: |
            An optional identifier that filters return values for a
            specific shift. The identifier can be a Toast platform GUID
            or an external identifier. If present, the shifts
            resource will only return the shifts you specify. You
            can include multiple `shiftIds` query parameters (maximum
            100).
          in: query
          schema:
            type: string
          required: false
        - name: startDate
          description: |
            Optional start date and time of time period to match 
            shifts. A shift matches the time period if the shift 
            `inDate` is after (inclusive) the specified `startDate` and 
            the shift `outDate` is before the `endDate` (exclusive). 
            These parameters are required if the `shiftIds` parameter 
            is not defined. The specified period cannot be longer than 
            one month.
          in: query
          schema:
            type: string
        - name: endDate
          description: |
            Optional end date and time of time period to match shifts. 
            A shift matches the time period if the shift `inDate` is 
            after (inclusive) the specified `startDate` and the shift 
            `outDate` is before the `endDate` (exclusive). These 
            parameters are required if the `shiftIds` parameter is not 
            defined. The specified period cannot be longer than one 
            month.
          in: query
          schema:
            type: string
      responses:
        "200":
          description: |
            Returns the specified shifts in an unordered list.
          content:
            application/json:
              schema:
                title: Response
                type: array
                items:
                  $ref: "#/components/schemas/Shift"
        "500":
          description: |
            An unexpected internal error occurred. There is a 
            `requestId` attached to this error that can be referenced 
            by Toast support.
      security:
        - oauth2:
            - labor:read
    post:
      tags:
        - Shifts
      summary: Create a shift
      description: |
        Creates a schedule shift for a restaurant employee.
      operationId: shiftsPost
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: Content-Type
          description: |
            The Internet Assigned Numbers Authority (IANA) media type 
            of the message body data. The value must be 
            `application/json`.
          in: header
          schema:
            type: string
          required: true
      requestBody:
        description: |
          A `Shift` object containing information about the shift, 
          including the job identifier, the employee identifier, and 
          the start and end times.
        required: true
        content:
          application/json:
            schema:
              type: string
              example:
                externalId: MyToastNamingAuthority:1234
                entityType: Shift
                jobReference:
                  guid: 678758d1-6aa8-494c-be55-0614f761d160
                  externalId: ""
                  entityType: RestaurantJob
                employeeReference:
                  guid: 7030407f-761c-4d92-86d9-4e84bc700d0f
                  externalId: ""
                  entityType: RestaurantUser
                inDate: 2015-10-10T06:00:00.000+0000
                outDate: 2015-10-10T12:00:00.000+0000
      responses:
        "200":
          description: |
            Creates a shift record and returns information about it.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shift"
        "400":
          description: |
            The request contains data that is not supported by the 
            current version of the API as described.
        "415":
          description: |
            The request did not have "application/json" in the 
            `Content-Type` header.
        "500":
          description: |
            An unexpected internal error occurred. There is a 
            `requestId` attached to this error that can be referenced 
            by Toast support.
      security:
        - oauth2:
            - labor.shifts:write
  "/labor/v1/shifts/{shiftId}":
    get:
      tags:
        - Shifts
      summary: Get a shift
      description: |
        Returns a `Shift` object containing of information about one 
        schedule shift for a restaurant employee.
      operationId: shiftsShiftIdGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: shiftId
          description: |
            The Toast platform GUID or an external identifier for the 
            shift.
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: |
            Returns the specified shifts in an unordered list.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shift"
        "400":
          description: |
            The GUID or external identifier was malformed.
        "404":
          description: |
            The GUID or external identifier does not match any shifts
            at the current restaurant.
        "500":
          description: |
            An unexpected internal error occurred. There is a 
            `requestId` attached to this error that can be referenced 
            by Toast support.
      security:
        - oauth2:
            - labor:read
    put:
      tags:
        - Shifts
      summary: Update a shift
      description: |
        Updates an existing schedule shift record for a restaurant 
        employee. A `PUT` request completely replaces the information 
        in the existing record.
      operationId: shiftsShiftIdPut
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: shiftId
          description: |
            The shift identifier, either the Toast platform GUID or an 
            external identifier.
          in: path
          schema:
            type: string
          required: true
      requestBody:
        description: |
          The shift information. The `externalId` identifier is not 
          allowed for`PUT` requests.
        required: true
        content:
          application/json:
            schema:
              type: string
              example:
                entityType: Shift
                jobReference:
                  guid: 678758d1-6aa8-494c-be55-0614f761d160
                  externalId: ""
                  entityType: RestaurantJob
                employeeReference:
                  guid: 7030407f-761c-4d92-86d9-4e84bc700d0f
                  externalId: ""
                  entityType: RestaurantUser
                inDate: 2015-10-10T06:00:00.000+0000
                outDate: 2015-10-10T12:00:00.000+0000
      responses:
        "200":
          description: |
            Returns the updated `Shift`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shift"
        "400":
          description: |
            The request contains data that is not supported by the 
            current version of the API as described.
        "404":
          description: |
            The GUID or external identifier does not match any shifts
            at the current restaurant.
        "415":
          description: |
            The request did not have `application/json` in the 
            `Content-Type` header.
        "500":
          description: |
            An unexpected internal error occurred. There is a 
            `requestId` attached to this error that can be referenced 
            by Toast support.
      security:
        - oauth2:
            - labor.shifts:write
    delete:
      tags:
        - Shifts
      summary: Delete a shift
      description: |
        Marks an existing schedule shift record for a restaurant 
        employee as deleted. If the shift record was already deleted, 
        then the operation will succeed (HTTP 200 response code) and no 
        change will be made.
      operationId: shiftsShiftIdDelete
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: shiftId
          description: |
            The shift identifier, either the Toast platform GUID or an 
            external identifier.
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: |
            Returns the specified shift, with the deleted flag set to 
            `true`.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Shift"
        "400":
          description: |
            The Toast platform GUID or external identifier was 
            malformed.
        "404":
          description: |
            The Toast platform GUID or external identifier does not 
            match any shifts at the current restaurant.
        "500":
          description: |
            An unexpected internal error occurred. There is a 
            `requestId` attached to this error that can be referenced 
            by Toast support.
      security:
        - oauth2:
            - labor.shifts:write
  /labor/v1/jobs:
    get:
      tags:
        - Jobs
      summary: Get jobs
      description: |
        Returns an array of `Job` objects containing information about 
        the employee jobs configured at a restaurant.
      operationId: jobsGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: jobIds
          description: |
            An optional array of one or more job identifiers, either 
            the Toast platform GUID or an external identifier assigned 
            by the client. 100 max. If not provided, all jobs known to 
            the Toast platform for this restaurant will be returned.
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: |
            Returns the specified jobs.
          content:
            application/json:
              schema:
                title: Response
                type: array
                items:
                  $ref: "#/components/schemas/Job"
        "500":
          description: |
            An unexpected internal error occurred. There is a 
            `requestId` attached to this error that can be referenced 
            by Toast support.
      security:
        - oauth2:
            - labor:read
  "/labor/v1/jobs/{jobId}":
    get:
      tags:
        - Jobs
      summary: Get one job
      description: |
        Returns a `Job` object containing information about one 
        employee job at a restaurant.
      operationId: jobsJobIdGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: jobId
          description: |
            The Toast platform GUID or an external identifier for the 
            job.
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: |
            Returns the specified job.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
        "400":
          description: |
            The Toast platform GUID or external identifier was 
            malformed.
        "500":
          description: |
            An unexpected internal error occurred. There is a 
            `requestId` attached to this error that can be referenced 
            by Toast support.
      security:
        - oauth2:
            - labor:read
  "/labor/v1/jobs/{jobId}/externalId":
    parameters:
      - name: jobId
        description: |
          The Toast platform GUID or external identifier of the job 
          record.
        in: path
        schema:
          type: string
        required: true
    post:
      tags:
        - Jobs
      summary: Add an external identifier
      description: |
        Adds an external identifier for an existing job. Include the 
        string value of the new external identifier in the message 
        body.

        You cannot change an existing external identifier with another 
        `POST` request. The Toast platform uses this external 
        identifier as one of the unique, persistent identifiers for a 
        job record.
      operationId: jobsJobIdExternalIdPost
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: Content-Type
          description: |
            The Internet Assigned Numbers Authority (IANA) media type 
            of the message body data. The value must be 
            `application/json`.
          in: header
          schema:
            type: string
          required: true
      requestBody:
        description: |
          The JSON string value of the `externalId` for the job 
          record. Wrap the value in double quotation marks to make it 
          valid JSON syntax.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: MyToastNamingAuthority:9876543210
      responses:
        "200":
          description: |
            Returns the updated job record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
      security:
        - oauth2:
            - labor.jobs:write
    put:
      tags:
        - Jobs
      summary: Add or replace an external identifier
      description: |
        Adds or replaces the external identifier for an existing job. 
        Include the string value of the new external identifier in the 
        message body.

        The Toast platform uses this external identifier as one of the 
        unique, persistent identifiers for a job record. _Changing the 
        external identifier for an existing job might affect reporting 
        and other Toast platform functions that select jobs using the 
        `externalId` value._
      operationId: jobsJobIdExternalIdPut
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: Content-Type
          description: |
            The Internet Assigned Numbers Authority (IANA) media type 
            of the message body data. The value must be 
            `application/json`.
          in: header
          schema:
            type: string
          required: true
      requestBody:
        description: |
          The JSON string value of the `externalId` for the job 
          record. Wrap the value in double quotation marks to make it 
          valid JSON syntax.
        required: true
        content:
          application/json:
            schema:
              type: string
              example: MyToastNamingAuthority:9876543210
      responses:
        "200":
          description: |
            Returns the updated job record.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
      security:
        - oauth2:
            - labor.jobs:write
  /labor/v1/timeEntries:
    get:
      tags:
        - Time entries
      summary: Get time entries
      description: |
        Returns an array of `TimeEntry` objects that contain 
        information about employee shift events. The information 
        includes shift start times, end times, and the start and end 
        times of break periods.

        *  Include one or more `timeEntryId` query parameters set to 
           the GUIDs for specific time entries.

        *  Include both a `startDate` and an `endDate` query parameter 
           to get time entries for a specific time period.

        *  Include both a `modifiedStartDate` and a `modifiedEndDate` 
           query parameter to get the time entries that were modified 
           during a specific time period.

        *  Includes a `businessDate` query parameter to get the time 
           entries with an `inDate` during a specific business date.

        Valid requests include one or more `timeEntryId` parameters, 
        both a `startDate` and an `endDate`, both a `modifiedStartDate` 
        and a `modifiedEndDate`, or a `businessDate`.
      operationId: timeEntriesGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: timeEntryIds
          description: |
            Optional array of one or more time entry identifiers, 
            either the Toast platform GUID or an external identifier. 
            100 max.
          in: query
          schema:
            type: array
            items:
              type: string
        - name: startDate
          description: |
            Optional start date and time of time period to match time 
            entries. A time entry matches the time period if its 
            clock-in `inDate` is after (inclusive) the specified 
            `startDate` and before (exclusive) the `endDate`. The 
            specified period cannot be longer than one month.
          in: query
          schema:
            type: string
        - name: endDate
          description: |
            Optional end date and time of time period to match time 
            entries. A time entry matches the time period if its 
            clock-in `inDate` is after (inclusive) the specified 
            `startDate` and before (exclusive) the `endDate`. The 
            specified period cannot be longer than one month.
          in: query
          schema:
            type: string
        - name: modifiedStartDate
          description: |
            Start date and time of the time period to match modified 
            time entries. A time entry matches the time period if that 
            entry was modified after (inclusive) the 
            `modifiedStartDate`. If you include this parameter, you 
            must also include the `modifiedEndDate` parameter.  The 
            specified period cannot be longer than one month.
          in: query
          schema:
            type: string
        - name: modifiedEndDate
          description: |
            End date and time of the time period to match modified time 
            entries. A time entry matches the time period if that entry 
            was modified before (exclusive) the `modifiedEndDate`. If 
            you include this parameter, you must also include the 
            `modifiedStartDate` parameter.  The specified period cannot 
            be longer than one month.
          in: query
          schema:
            type: string
        - name: businessDate
          description: |
            Optional date to match time entries. A time entry matches 
            the business date if its clock-in `inDate` is during the 
            business date. The cutoff from one `businessDate` to the 
            next is the `closeoutHour` for the restaurant.
          in: query
          schema:
            type: string
            format: date
        - name: includeMissedBreaks
          description: |
            Optional flag to indicate whether missed breaks should be 
            returned in the breaks array for the time entries.
          in: query
          schema:
            type: boolean
        - name: includeArchived
          description: >
            Controls whether the response includes archived time entries, when

            using the `startDate` and `endDate` parameters.


            **Important**: this parameter _has no effect_ if you use the

            `modifiedStartDate` and `modifiedEndDate` parameters or the

            `businessDate` parameter to select time entries.


            * Querying by modified date range _always_ returns archived time entries.

            * Querying by businessDate _never_ returns archived time entries.


            This parameter is optional and the default value is `false`.
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: |
            Returns the specified time entries.
          content:
            application/json:
              schema:
                title: Response
                type: array
                items:
                  $ref: "#/components/schemas/TimeEntry"
        "500":
          description: |
            An unexpected internal error occurred. There is a 
            `requestId` attached to this error that can be referenced 
            by Toast support.
      security:
        - oauth2:
            - labor:read
  "/labor/v1/timeEntries/{timeEntryId}":
    get:
      tags:
        - Time entries
      summary: Get one time entry
      description: |
        Returns a `TimeEntry` object containing information about one 
        employee shift. The information includes the shift start time, 
        end time, and the start and end times of break periods.
      operationId: timeEntriesTimeEntryIdGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast platform GUID of the restaurant that is the 
            context for this operation.
          in: header
          schema:
            type: string
          required: true
        - name: timeEntryId
          description: |
            The Toast platform GUID or an external identifier for the 
            time entry.
          in: path
          schema:
            type: string
          required: true
        - name: includeMissedBreaks
          description: |
            Optional flag to indicate whether missed breaks should be 
            returned in the breaks array for the time entries.
          in: query
          schema:
            type: boolean
        - name: includeArchived
          description: |
            Controls whether the response includes an archived time entry.
            Optional.
          in: query
          schema:
            type: boolean
      responses:
        "200":
          description: |
            Returns the specified time entry.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeEntry"
        "400":
          description: |
            The GUID or external identifier was malformed.
        "500":
          description: |
            An unexpected internal error occurred. There is a 
            `requestId` attached to this error that can be referenced 
            by Toast support.
      security:
        - oauth2:
            - labor:read
  /restaurants/v1/restaurants/{restaurantGUID}:
    get:
      tags:
        - Restaurants
      operationId: restaurantsRestaurantGuidGet
      summary: Get restaurant configuration information
      description: |
        Returns a `RestaurantInfo` object
        that contains detailed information about the configuration of a
        restaurant.
      parameters:
        - name: restaurantGUID
          description: |
            The Toast GUID of the restaurant that you want to get 
            information about.
          in: path
          required: true
          schema:
            type: string
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast GUID of the restaurant that you want to get 
            information about.
          in: header
          required: true
          schema:
            type: string
        - name: includeArchived
          description: |
            Set `includeArchived` to `true` if the API should return information
            about the restaurant even if it is archived. The `General` object in
            the response includes an `archived` value that your integration can
            use to determine whether a restaurant is archived or not. A common
            reason for a restaurant being archived is if it was created in
            error. Set `includeArchived` to `false` if the API should _not_
            return information about the restaurant if it is archived. Defaults
            to `false` if omitted.
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: |
            A `RestaurantInfo` object that contains detailed 
            information about the configuration of a restaurant.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantInfo"
        "404":
          description: |
            If the restaurant GUID you provided is invalid, the API will return
            an HTTP 404 response. The API will also return an HTTP 404 response
            if you provided the GUID of an archived restaurant and you have not
            set the `includeArchived` query parameter to `true`.
      security:
        - oauth2:
            - restaurants:read
  /restaurants/v1/groups/{managementGroupGUID}/restaurants:
    get:
      tags:
        - Restaurants
      operationId: groupsManagementGroupGuidRestaurantsGet
      summary: Get restaurants in a management group
      description: |
        Returns an array of `Restaurant` objects that are a part of the 
        restaurant management group you specify in the 
        `managementGroupGUID` path parameter. Each `Restaurant` object 
        contains the unique Toast platform identifier for the restaurant in 
        its `guid` value.
      parameters:
        - name: managementGroupGUID
          in: path
          required: true
          schema:
            type: string
          description: |
            The GUID of the restaurant management group.
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast GUID of one restaurant location in the management 
            group.
          in: header
          required: true
          schema:
            type: string
      responses:
        "200":
          description: |
            An array of `Restaurant` objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RestaurantBasic"
      security:
        - oauth2:
            - restaurants:read
  /config/v2/alternatePaymentTypes/{guid}:
    get:
      tags:
        - Alternate Payment Types
      operationId: alternatePaymentTypesGuidGet
      summary: |
        Get an alternative payment type
      description: |
        Returns an `AlternatePaymentType`
        object containing information about an alternative form of payment
        configured for a restaurant. Alternate payment types are forms
        of payment that are not standard in the Toast POS and that are
        configured for a particular restaurant. For example, a
        third-party service that processes payments might be configured
        as an alternate payment type.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the alternate payment
            type is configured for.
          in: header
          required: true
          schema:
            type: string
        - name: guid
          description: The Toast POS GUID of the alternative form of payment.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns an `AlternatePaymentType` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlternatePaymentType"
      security:
        - oauth2:
            - config:read
  /config/v2/alternatePaymentTypes:
    get:
      tags:
        - Alternate Payment Types
      operationId: alternatePaymentTypesGet
      summary: |
        Get alternative payment types
      description: |
        Returns an array of `AlternatePaymentType`
        objects containing information about alternative forms of
        payment that are configured for a restaurant. Alternate
        payment types are forms of payment that are not standard in the
        Toast POS and that are configured for a particular restaurant.
        For example, a third-party service that processes payments
        might be configured as an alternate payment type. If a
        `lastModified` date is specified, returns all objects that were
        created or modified after that date.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the configuration
            applies to.
          in: header
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          description: |
            A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the `pageToken` parameter from the `Toast-Next-Page-Token` header field value of a previous request to the endpoint. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.
          required: false
          schema:
            type: string
        - name: lastModified
          description: |
            Limits the return data to objects created or modified after
            a specific date and time. For example:
            `2024-06-20T00:00:00.000+0000`.
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `AlternatePaymentType` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/AlternatePaymentType"
          headers:
            Toast-Next-Page-Token:
              description: |
                A string that identifies the following set of objects 
                that the endpoint will return. You can use this value 
                to retrieve that page of response data. To return 
                the next page of objects you supply this value in the 
                `pageToken` parameter of the next request to the 
                endpoint. For more information, see 
                <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.

                The endpoint does not return the 
                `Toast-Next-Page-Token` field if there is no following 
                page of response data objects. For example, the 
                endpoint will not return a `Toast-Next-Page-Token` 
                header field if all the data objects fit in one 
                response or if you have reached the last page of 
                response objects.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/breakTypes/{guid}:
    get:
      tags:
        - Break Types
      operationId: breakTypesGuidGet
      summary: |
        Get a break type
      description: |
        Returns a `BreakType`
        object containing information about a break type configured for 
        a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the break is configured for.
          in: header
          required: true
          schema:
            type: string
        - name: guid
          description: The Toast POS GUID of the break config.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a `BreakType` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BreakType"
      security:
        - oauth2:
            - config:read
  /config/v2/breakTypes:
    get:
      tags:
        - Break Types
      operationId: breakTypesGet
      summary: |
        Get break types
      description: |
        Returns an array of `BreakType`
        objects containing information about breaks configured for a
        restaurant. If a `lastModified` date is specified, returns
        all objects that were created or modified after that date.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the configuration
            applies to.
          in: header
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          description: |
            A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the `pageToken` parameter from the `Toast-Next-Page-Token` header field value of a previous request to the endpoint. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.
          required: false
          schema:
            type: string
        - name: lastModified
          description: |
            Limits the return data to objects created or modified after
            a specific date and time. For example:
            `2024-06-20T00:00:00.000+0000`.
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `BreakType` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/BreakType"
          headers:
            Toast-Next-Page-Token:
              description: |
                A string that identifies the following set of objects 
                that the endpoint will return. You can use this value 
                to retrieve that page of response data. To return 
                the next page of objects you supply this value in the 
                `pageToken` parameter of the next request to the 
                endpoint. For more information, see 
                <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.

                The endpoint does not return the 
                `Toast-Next-Page-Token` field if there is no following 
                page of response data objects. For example, the 
                endpoint will not return a `Toast-Next-Page-Token` 
                header field if all the data objects fit in one 
                response or if you have reached the last page of 
                response objects.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/cashDrawers/{guid}:
    get:
      tags:
        - Cash Drawers
      operationId: cashDrawersGuidGet
      summary: |
        Get a cash drawer
      description: |
        Returns a `CashDrawer` object containing information about a cash drawer configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the cash drawer is configured for.
          in: header
          required: true
          schema:
            type: string
        - name: guid
          description: The Toast POS GUID of the cash drawer.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a `CashDrawer` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CashDrawer"
      security:
        - oauth2:
            - config:read
  /config/v2/cashDrawers:
    get:
      tags:
        - Cash Drawers
      operationId: cashDrawersGet
      summary: |
        Get cash drawers
      description: |
        Returns an array of `CashDrawer` objects containing information about cash drawers configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the configuration applies to.
          in: header
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          description: |
            A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the `pageToken` parameter from the `Toast-Next-Page-Token` header field value of a previous request to the endpoint. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.
          required: false
          schema:
            type: string
        - name: lastModified
          description: |
            Limits the return data to objects created or modified after a specific date and time. For example: `2024-06-20T00:00:00.000+0000`.
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `CashDrawer` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/CashDrawer"
          headers:
            Toast-Next-Page-Token:
              description: |
                A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the `pageToken` parameter of the next request to the endpoint. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.

                The endpoint does not return the `Toast-Next-Page-Token` field if there is no following page of response data objects. For example, the endpoint will not return a `Toast-Next-Page-Token` header field if all the data objects fit in one response or if you have reached the last page of response objects.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/diningOptions/{guid}:
    get:
      tags:
        - Dining Options
      operationId: diningOptionsGuidGet
      summary: |
        Get a dining option
      description: |
        Returns a `DiningOption` object containing information about a dining option configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the dining option is configured for.
          in: header
          required: true
          schema:
            type: string
        - name: guid
          description: The Toast POS GUID of the dining option.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a `DiningOption` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiningOption"
      security:
        - oauth2:
            - config:read
  /config/v2/diningOptions:
    get:
      tags:
        - Dining Options
      operationId: diningOptionsGet
      summary: |
        Get dining options
      description: |
        Returns an array of `DiningOption` objects containing information about dining options configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the configuration applies to.
          in: header
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          description: |
            A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the `pageToken` parameter from the `Toast-Next-Page-Token` header field value of a previous request to the endpoint. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.
          required: false
          schema:
            type: string
        - name: lastModified
          description: |
            Limits the return data to objects created or modified after a specific date and time. For example: `2024-06-20T00:00:00.000+0000`.
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `DiningOption` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/DiningOption"
          headers:
            Toast-Next-Page-Token:
              description: |
                A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the `pageToken` parameter of the next request to the endpoint. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.

                The endpoint does not return the `Toast-Next-Page-Token` field if there is no following page of response data objects. For example, the endpoint will not return a `Toast-Next-Page-Token` header field if all the data objects fit in one response or if you have reached the last page of response objects.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/discounts:
    get:
      tags:
        - Discounts
      operationId: discountsGet
      summary: Get discounts
      description: |
        Returns an array of `Discount` objects containing
        information about the price deductions configured for a
        restaurant. If a `lastModified` date is specified, returns all
        objects that were created or modified after that date.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the configuration
            applies to.
          in: header
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          schema:
            type: string
          description: |
            A string that identifies the set of data objects that the 
            endpoint will return in its response data. You can use this 
            parameter to retrieve one page of response data. You 
            get the value that you supply in the `pageToken` parameter 
            from the `Toast-Next-Page-Token` header field value of a 
            previous request to the endpoint. For more information, see 
            <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.
        - name: lastModified
          description: |
            Limits the return data to objects created or modified after
            a specific date and time. For example:
            `2024-06-20T00:00:00.000+0000`.
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `Discount` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/Discount"
          headers:
            Toast-Next-Page-Token:
              schema:
                type: string
              description: |
                A string that identifies the following set of objects 
                that the endpoint will return. You can use this value 
                to retrieve that page of response data. To return 
                the next page of objects you supply this value in the 
                `pageToken` parameter of the next request to the 
                endpoint. For more information, see 
                <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.
      security:
        - oauth2:
            - config:read
  /config/v2/discounts/{guid}:
    get:
      tags:
        - Discounts
      operationId: discountsGuidGet
      summary: Get a discount
      description: |
        Returns a `Discount`
        object containing information about a price deduction
        configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the configuration
            applies to.
          in: header
          required: true
          schema:
            type: string
        - name: guid
          description: The Toast POS GUID of the discount.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a `Discount` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Discount"
      security:
        - oauth2:
            - config:read
  /config/v2/menuGroups/{guid}:
    get:
      tags:
        - Menu Groups
      operationId: menuGroupsGuidGet
      summary: |
        Get a menu group
      description: |
        Returns a `MenuGroup` object containing information about a menu group configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the menu group is configured for.
          in: header
          required: true
          schema:
            type: string
        - name: guid
          description: The Toast POS GUID of the menu group.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a `MenuGroup` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuGroup"
      security:
        - oauth2:
            - config:read
  /config/v2/menuGroups:
    get:
      tags:
        - Menu Groups
      operationId: menuGroupsGet
      summary: |
        Get menu groups
      description: |
        Returns an array of `MenuGroup` objects containing information about menu groups configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the configuration applies to.
          in: header
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          description: |
            A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the `pageToken` parameter from the `Toast-Next-Page-Token` header field value of a previous request to the endpoint. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.
          required: false
          schema:
            type: string
        - name: lastModified
          description: |
            Limits the return data to objects created or modified after a specific date and time. For example: `2024-06-20T00:00:00.000+0000`.
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `MenuGroup` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/MenuGroup"
          headers:
            Toast-Next-Page-Token:
              description: |
                A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the `pageToken` parameter of the next request to the endpoint. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.

                The endpoint does not return the `Toast-Next-Page-Token` field if there is no following page of response data objects. For example, the endpoint will not return a `Toast-Next-Page-Token` header field if all the data objects fit in one response or if you have reached the last page of response objects.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/menuItems/{guid}:
    get:
      tags:
        - Menu Items
      operationId: menuItemsGuidGet
      summary: |
        Get a menu item
      description: |
        Returns a `MenuItem` object containing information about a menu item configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the menu item is configured for.
          in: header
          required: true
          schema:
            type: string
        - name: guid
          description: The Toast POS GUID of the menu item.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a `MenuItem` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuItem"
      security:
        - oauth2:
            - config:read
  /config/v2/menuItems:
    get:
      tags:
        - Menu Items
      operationId: menuItemsGet
      summary: |
        Get menu items
      description: |
        Returns an array of `MenuItem` objects containing information about menu items configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the configuration applies to.
          in: header
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          description: |
            A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the `pageToken` parameter from the `Toast-Next-Page-Token` header field value of a previous request to the endpoint. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.
          required: false
          schema:
            type: string
        - name: lastModified
          description: |
            Limits the return data to objects created or modified after a specific date and time. For example: `2024-06-20T00:00:00.000+0000`.
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `MenuItem` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/MenuItem"
          headers:
            Toast-Next-Page-Token:
              description: |
                A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the `pageToken` parameter of the next request to the endpoint. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.

                The endpoint does not return the `Toast-Next-Page-Token` field if there is no following page of response data objects. For example, the endpoint will not return a `Toast-Next-Page-Token` header field if all the data objects fit in one response or if you have reached the last page of response objects.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/printers/{guid}:
    get:
      tags:
        - Printers
      operationId: printersGuidGet
      summary: |
        Get a printer
      description: |
        Returns a `Printer` object containing information about a printer configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the printer is configured for.
          in: header
          required: true
          schema:
            type: string
        - name: guid
          description: The Toast POS GUID of the printer.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a `Printer` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Printer"
      security:
        - oauth2:
            - config:read
  /config/v2/printers:
    get:
      tags:
        - Printers
      operationId: printersGet
      summary: |
        Get printers
      description: |
        Returns an array of `Printer` objects containing information about printers configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the configuration applies to.
          in: header
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          description: |
            A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the `pageToken` parameter from the `Toast-Next-Page-Token` header field value of a previous request to the endpoint. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.
          required: false
          schema:
            type: string
        - name: lastModified
          description: |
            Limits the return data to objects created or modified after a specific date and time. For example: `2024-06-20T00:00:00.000+0000`.
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `Printer` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/Printer"
          headers:
            Toast-Next-Page-Token:
              description: |
                A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the `pageToken` parameter of the next request to the endpoint. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.

                The endpoint does not return the `Toast-Next-Page-Token` field if there is no following page of response data objects. For example, the endpoint will not return a `Toast-Next-Page-Token` header field if all the data objects fit in one response or if you have reached the last page of response objects.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/tables/{guid}:
    get:
      tags:
        - Tables
      operationId: tablesGuidGet
      summary: |
        Get a table
      description: |
        Returns a `Table` object containing information about a table configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the table is configured for.
          in: header
          required: true
          schema:
            type: string
        - name: guid
          description: The Toast POS GUID of the table.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a `Table` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Table"
      security:
        - oauth2:
            - config:read
  /config/v2/tables:
    get:
      tags:
        - Tables
      operationId: tablesGet
      summary: |
        Get tables
      description: |
        Returns an array of `Table` objects containing information about tables configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: |
            The Toast POS GUID of the restaurant that the configuration applies to.
          in: header
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          description: |
            A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the `pageToken` parameter from the `Toast-Next-Page-Token` header field value of a previous request to the endpoint. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.
          required: false
          schema:
            type: string
        - name: lastModified
          description: |
            Limits the return data to objects created or modified after a specific date and time. For example: `2024-06-20T00:00:00.000+0000`.
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `Table` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/Table"
          headers:
            Toast-Next-Page-Token:
              description: |
                A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the `pageToken` parameter of the next request to the endpoint. For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html">Paginating response data</a>.

                The endpoint does not return the `Toast-Next-Page-Token` field if there is no following page of response data objects. For example, the endpoint will not return a `Toast-Next-Page-Token` header field if all the data objects fit in one response or if you have reached the last page of response objects.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/preModifiers:
    get:
      tags:
        - Pre Modifiers
      operationId: preModifiersGet
      summary: Get pre-modifiers
      description: Returns an array of `PreModifier` objects containing information about PreModifiers configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The Toast POS GUID of the restaurant that the configuration applies to.
          in: header
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          description: A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the `pageToken` parameter from the `Toast-Next-Page-Token` header field value of a previous request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
          required: false
          schema:
            type: string
        - name: lastModified
          description: "Limits the return data to objects created or modified after a specific date and time. For example: `2024-06-20T00:00:00.000+0000`."
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `PreModifier` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/PreModifier"
          headers:
            Toast-Next-Page-Token:
              description: A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the `pageToken` parameter of the next request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/preModifierGroups/{guid}:
    get:
      tags:
        - Pre Modifier Groups
      operationId: preModifierGroupsGuidGet
      summary: Get a pre-modifier group
      description: Returns a `PreModifierGroup` object containing information about a pre modifier group.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The Toast POS GUID of the restaurant that the configuration applies to.
          in: header
          required: true
          schema:
            type: string
        - name: guid
          description: The Toast POS GUID of the pre-modifier.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a `PreModifierGroup` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PreModifierGroup"
      security:
        - oauth2:
            - config:read
  /config/v2/preModifierGroups:
    get:
      tags:
        - Pre Modifier Groups
      operationId: preModifierGroupsGet
      summary: Get pre modifier groups
      description: "Returns an array of `PreModifierGroup` objects containing information about PreModifierGroup configured for a restaurant."
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The Toast POS GUID of the restaurant that the configuration applies to.
          in: header
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          description: A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the `pageToken` parameter from the `Toast-Next-Page-Token` header field value of a previous request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
          required: false
          schema:
            type: string
        - name: lastModified
          description: "Limits the return data to objects created or modified after a specific date and time. For example: `2024-06-20T00:00:00.000+0000`."
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `PreModifierGroup` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/PreModifierGroup"
          headers:
            Toast-Next-Page-Token:
              description: A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the `pageToken` parameter of the next request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/noSaleReasons/{guid}:
    get:
      tags:
        - No Sale Reasons
      operationId: noSaleReasonsGuidGet
      summary: Get a no sale reason
      description: Returns a `NoSaleReason` object containing information about a no sale reason.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The Toast POS GUID of the restaurant that the configuration applies to.
          in: header
          required: true
          schema:
            type: string
        - name: guid
          description: The Toast POS GUID of the no sale reason.
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Returns a `NoSaleReason` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoSaleReason"
      security:
        - oauth2:
            - config:read
  /config/v2/noSaleReasons:
    get:
      tags:
        - No Sale Reasons
      operationId: noSaleReasonsGet
      summary: Get no sale reasons
      description: Returns an array of `NoSaleReason` objects containing information about no sale reasons configured for a restaurant.
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The Toast POS GUID of the restaurant that the configuration applies to.
          in: header
          required: true
          schema:
            type: string
        - name: pageToken
          in: query
          description: A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the `pageToken` parameter from the `Toast-Next-Page-Token` header field value of a previous request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
          required: false
          schema:
            type: string
        - name: lastModified
          description: "Limits the return data to objects created or modified after a specific date and time. For example: `2024-06-20T00:00:00.000+0000`."
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `NoSaleReason` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/NoSaleReason"
          headers:
            Toast-Next-Page-Token:
              description: A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the `pageToken` parameter of the next request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/payoutReasons/{guid}:
    get:
      tags:
        - Payout Reasons
      summary: Get payout reason by GUID
      description: |
        Returns a specific payout reason by its GUID.
      operationId: payoutReasonsGuidGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: guid
          description: The GUID of the payout reason.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Returns a `PayoutReason` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PayoutReason"
        "404":
          description: Payout reason not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - oauth2:
            - config:read
  /config/v2/payoutReasons:
    get:
      tags:
        - Payout Reasons
      summary: Get payout reasons
      description: |
        Returns an array of payout reasons for the restaurant.
      operationId: payoutReasonsGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          description: The maximum number of objects to return. The default value is 300. The maximum value is 300.
          in: query
          required: false
          schema:
            type: integer
            default: 300
            maximum: 300
        - name: pageToken
          in: query
          description: A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the `pageToken` parameter from the `Toast-Next-Page-Token` header field value of a previous request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
          required: false
          schema:
            type: string
        - name: lastModified
          description: "Limits the return data to objects created or modified after a specific date and time. For example: `2024-06-20T00:00:00.000+0000`."
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `PayoutReason` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/PayoutReason"
          headers:
            Toast-Next-Page-Token:
              description: A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the `pageToken` parameter of the next request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/priceGroups/{guid}:
    get:
      tags:
        - Price Groups
      summary: Get price group by GUID
      description: |
        Returns a specific price group by its GUID.
      operationId: priceGroupsGuidGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: guid
          description: The GUID of the price group.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Returns a `PriceGroup` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PriceGroup"
        "404":
          description: Price group not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - oauth2:
            - config:read
  /config/v2/priceGroups:
    get:
      tags:
        - Price Groups
      summary: Get price groups
      description: |
        Returns an array of price groups for the restaurant.
      operationId: priceGroupsGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          description: The maximum number of objects to return. The default value is 300. The maximum value is 300.
          in: query
          required: false
          schema:
            type: integer
            default: 300
            maximum: 300
        - name: pageToken
          in: query
          description: A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the `pageToken` parameter from the `Toast-Next-Page-Token` header field value of a previous request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
          required: false
          schema:
            type: string
        - name: lastModified
          description: "Limits the return data to objects created or modified after a specific date and time. For example: `2024-06-20T00:00:00.000+0000`."
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `PriceGroup` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/PriceGroup"
          headers:
            Toast-Next-Page-Token:
              description: "A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the `pageToken` parameter of the next request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html."
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/taxRates/{guid}:
    get:
      tags:
        - Tax Rates
      summary: Get tax rate by GUID
      description: Returns a specific tax rate by its GUID.
      operationId: taxRatesGuidGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: guid
          description: The GUID of the tax rate.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Returns a `TaxRate` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaxRate"
        "404":
          description: Tax rate not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - oauth2:
            - config:read
  /config/v2/taxRates:
    get:
      tags:
        - Tax Rates
      summary: Get tax rates
      description: Returns an array of tax rates for the restaurant.
      operationId: taxRatesGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          description: The maximum number of objects to return. The default value is 300. The maximum value is 300.
          in: query
          required: false
          schema:
            type: integer
            default: 300
            maximum: 300
        - name: pageToken
          in: query
          description: A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the "pageToken" parameter from the "Toast-Next-Page-Token" header field value of a previous request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
          required: false
          schema:
            type: string
        - name: lastModified
          description: "Limits the return data to objects created or modified after a specific date and time. For example: '2024-06-20T00:00:00.000+0000'."
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `TaxRate` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/TaxRate"
          headers:
            Toast-Next-Page-Token:
              description: A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the "pageToken" parameter of the next request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/serviceAreas/{guid}:
    get:
      tags:
        - Service Areas
      summary: Get service area by GUID
      description: Returns a specific service area by its GUID.
      operationId: serviceAreasGuidGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: guid
          description: The GUID of the service area.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Returns a `ServiceArea` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceArea"
        "404":
          description: Service area not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - oauth2:
            - config:read
  /config/v2/serviceAreas:
    get:
      tags:
        - Service Areas
      summary: Get service areas
      description: Returns an array of service areas for the restaurant.
      operationId: serviceAreasGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          description: The maximum number of objects to return. The default value is 300. The maximum value is 300.
          in: query
          required: false
          schema:
            type: integer
            default: 300
            maximum: 300
        - name: pageToken
          in: query
          description: A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the "pageToken" parameter from the "Toast-Next-Page-Token" header field value of a previous request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
          required: false
          schema:
            type: string
        - name: lastModified
          description: "Limits the return data to objects created or modified after a specific date and time. For example: '2024-06-20T00:00:00.000+0000'."
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `ServiceArea` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/ServiceArea"
          headers:
            Toast-Next-Page-Token:
              description: A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the "pageToken" parameter of the next request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/serviceCharges/{guid}:
    get:
      tags:
        - Service Charges
      summary: Get service charge by GUID
      description: Returns a specific service charge by its GUID.
      operationId: serviceChargesGuidGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: guid
          description: The GUID of the service charge.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Returns a `ServiceCharge` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceCharge"
        "404":
          description: Service charge not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - oauth2:
            - config:read
  /config/v2/serviceCharges:
    get:
      tags:
        - Service Charges
      summary: Get service charges
      description: Returns an array of service charges for the restaurant.
      operationId: serviceChargesGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          description: The maximum number of objects to return. The default value is 300. The maximum value is 300.
          in: query
          required: false
          schema:
            type: integer
            default: 300
            maximum: 300
        - name: pageToken
          in: query
          description: A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the "pageToken" parameter from the "Toast-Next-Page-Token" header field value of a previous request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
          required: false
          schema:
            type: string
        - name: lastModified
          description: "Limits the return data to objects created or modified after a specific date and time. For example: '2024-06-20T00:00:00.000+0000'."
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: "Returns an array of `ServiceCharge` objects."
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/ServiceCharge"
          headers:
            Toast-Next-Page-Token:
              description: "A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the `pageToken` parameter of the next request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html."
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/revenueCenters/{guid}:
    get:
      tags:
        - Revenue Centers
      summary: Get revenue center by GUID
      description: Returns a specific revenue center by its GUID.
      operationId: revenueCentersGuidGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: guid
          description: The GUID of the revenue center.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Returns a `RevenueCenter` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RevenueCenter"
        "404":
          description: Revenue center not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - oauth2:
            - config:read
  /config/v2/revenueCenters:
    get:
      tags:
        - Revenue Centers
      summary: Get revenue centers
      description: Returns an array of revenue centers for the restaurant.
      operationId: revenueCentersGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          description: The maximum number of objects to return. The default value is 300. The maximum value is 300.
          in: query
          required: false
          schema:
            type: integer
            default: 300
            maximum: 300
        - name: pageToken
          in: query
          description: A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the "pageToken" parameter from the "Toast-Next-Page-Token" header field value of a previous request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
          required: false
          schema:
            type: string
        - name: lastModified
          description: "Limits the return data to objects created or modified after a specific date and time. For example: '2024-06-20T00:00:00.000+0000'."
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `RevenueCenter` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/RevenueCenter"
          headers:
            Toast-Next-Page-Token:
              description: A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the "pageToken" parameter of the next request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/restaurantServices/{guid}:
    get:
      tags:
        - Restaurant Services
      summary: Get restaurant service by GUID
      description: Returns a specific restaurant service by its GUID.
      operationId: restaurantServicesGuidGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: guid
          description: The GUID of the restaurant service.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Returns a `RestaurantService` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RestaurantService"
        "404":
          description: Restaurant service not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - oauth2:
            - config:read
  /config/v2/restaurantServices:
    get:
      tags:
        - Restaurant Services
      summary: Get restaurant services
      description: Returns an array of restaurant services for the restaurant.
      operationId: restaurantServicesGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          description: The maximum number of objects to return. The default value is 300. The maximum value is 300.
          in: query
          required: false
          schema:
            type: integer
            default: 300
            maximum: 300
        - name: pageToken
          in: query
          description: A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the "pageToken" parameter from the "Toast-Next-Page-Token" header field value of a previous request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
          required: false
          schema:
            type: string
        - name: lastModified
          description: "Limits the return data to objects created or modified after a specific date and time. For example: '2024-06-20T00:00:00.000+0000'."
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `RestaurantService` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/RestaurantService"
          headers:
            Toast-Next-Page-Token:
              description: A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the "pageToken" parameter of the next request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /config/v2/tipWithholding:
    get:
      tags:
        - Tip Withholding
      summary: Get tip withholding configuration
      description: Returns the tip withholding configuration for the restaurant.
      operationId: tipWithholdingGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Returns a `TipWithholding` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TipWithholding"
        "404":
          description: Tip withholding configuration not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - oauth2:
            - config:read
  /config/v2/voidReasons/{guid}:
    get:
      tags:
        - Void Reasons
      summary: Get void reason by GUID
      description: Returns a specific void reason by its GUID.
      operationId: voidReasonsGuidGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: guid
          description: The GUID of the void reason.
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Returns a `VoidReason` object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VoidReason"
        "404":
          description: Void reason not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - oauth2:
            - config:read
  /config/v2/voidReasons:
    get:
      tags:
        - Void Reasons
      summary: Get void reasons
      description: Returns an array of void reasons for the restaurant.
      operationId: voidReasonsGet
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          description: The maximum number of objects to return. The default value is 300. The maximum value is 300.
          in: query
          required: false
          schema:
            type: integer
            default: 300
            maximum: 300
        - name: pageToken
          in: query
          description: A string that identifies the set of data objects that the endpoint will return in its response data. You can use this parameter to retrieve one page of response data. You get the value that you supply in the "pageToken" parameter from the "Toast-Next-Page-Token" header field value of a previous request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
          required: false
          schema:
            type: string
        - name: lastModified
          description: "Limits the return data to objects created or modified after a specific date and time. For example: '2024-06-20T00:00:00.000+0000'."
          in: query
          required: false
          schema:
            type: string
            example: "2024-06-20T00:00:00.000+0000"
      responses:
        "200":
          description: Returns an array of `VoidReason` objects.
          content:
            application/json:
              schema:
                title: Response
                type: array
                minItems: 0
                maxItems: 300
                items:
                  $ref: "#/components/schemas/VoidReason"
          headers:
            Toast-Next-Page-Token:
              description: A string that identifies the following set of objects that the endpoint will return. You can use this value to retrieve that page of response data. To return the next page of objects you supply this value in the "pageToken" parameter of the next request to the endpoint. For more information, see https://doc.toasttab.com/doc/devguide/apiResponseDataPagination.html.
              schema:
                type: string
      security:
        - oauth2:
            - config:read
  /menus/v2/menus:
    get:
      operationId: menusV2Get
      summary: Get menus (V2)
      description: |
        Get menus

        _Important:_ Ordering integrations should use menus API V3. Other integration types should continue to use menus API V2 until further notice. See <a href="https://doc.toasttab.com/doc/devguide/apiComparingMenusAPIV2AndV3.html">Comparing menus API V2 and V3</a> for more information.
      tags:
        - Menus V2
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Restaurant"
        "404":
          description: No published data was found for the restaurant. Ensure that the restaurant GUID is correct and that its data has been published.
        "503":
          description: Unable to retrieve menus for the restaurant due to a service outage.
      security:
        - oauth2:
            - menus:read
  /menus/v2/metadata:
    get:
      operationId: menusV2MetadataGet
      summary: Get menu last modified timestamp (V2)
      description: |
        A lightweight endpoint that allows you to determine if a restaurant's menu data has been updated. Toast support strongly recommends that you do not make a call to the `/menus` endpoint unless the date and time returned by the `/metadata` endpoint is more recent than the `lastUpdated` date and time. While this recommendation applies to all clients of the menus API, it is particularly important for clients that have limited bandwidth.
      tags:
        - Menus V2
      parameters:
        - name: Toast-Restaurant-External-ID
          description: The identifier for the restaurant.
          in: header
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metadata"
      security:
        - oauth2:
            - menus:read

components:
  securitySchemes:
    oauth2:
      type: oauth2
      description: |
        Access to Toast APIs, specific endpoints, 
        and specific API endpoint operations is 
        controlled by the scopes that are associated 
        with your API account. 
        A full reference for Toast API scopes and 
        their capabilities can be found in the
        [_Toast Developer Guide_](https://doc.toasttab.com/doc/devguide/apiScopes.html).
      flows:
        clientCredentials:
          tokenUrl: https://toast-api-server/authentication/v1/authentication/login
          scopes:
            restaurants:read: "Allows reading from the restaurants API."
            labor:read: "Allows reading from the labor API."
            orders:read: "Allows reading from the orders API."
            orders:write: "Allows writing to the orders API."
            payments:read: "Allows reading from the payments API."
            payments:write: "Allows writing to the payments API."
            discounts:read: "Allows reading from the discounts API."
            discounts:write: "Allows writing to the discounts API."
            menus.channel:read: "Allows reading from the menus API."
            menus:read: "Allows reading from menus API V2."
            config:read: "Allows reading from the configuration API."
  schemas:
    AuthenticationRequest:
      type: object
      description: |
        Authentication credentials for your Toast API integration client software.
      required:
        - clientId
        - clientSecret
        - userAccessType
      properties:
        clientId:
          description: |
            The identifier string for your Toast API client. You receive the
            identifier string from the Toast integrations team.
          type: string
          example: VKuhk4NaLedOcjZpJM8grvdrsFi3MlcM
        clientSecret:
          description: |
            The secret string that corresponds to your Toast API client. You
            receive the secret string from the Toast integrations team.
          type: string
          example: eS960aiKdvgbSDcLUCk68HR2CJKwwHNO2HKfgxjCWxoj27KIp6jFAi2XOOc_oCuv
        userAccessType:
          description: |
            Always include the `userAccessType` value and set it to
            `TOAST_MACHINE_CLIENT`.
          type: string
          example: TOAST_MACHINE_CLIENT
    AuthenticationResponse:
      type: object
      description: |
        A wrapper object for the response to a successful Toast API authentication
        request.
      properties:
        token:
          description: |
            An `AuthenticationToken` object containing information about a Toast
            platform API session, including an authentication token string that
            your Toast API client software can present when using other Toast
            platform APIs.
          $ref: "#/components/schemas/AuthenticationToken"
        status:
          description:
            The value `SUCCESS` indicates that your authentication request was
            successful.
          type: string
          example: SUCCESS
    AuthenticationToken:
      type: object
      description: |
        Information about a Toast platform API session, including an
        authentication token string that your Toast API client software can
        present when using other Toast platform APIs.
      properties:
        tokenType:
          description: |
            The OAuth 2 authentication scheme used for the authentication token.
            Toast API authentication uses the bearer authentication scheme.
          type: string
          example: Bearer
        scope:
          description: |
            The scope value in the authentication token request response is
            `null`. The `accessToken` JSON Web Token (JWT) contains the list of
            [scopes for your Toast API
            client](https://dev.toasttab.com/doc/devguide/apiScopes.html).
          type: string
        expiresIn:
          description: |
            The number of seconds that the authentication token is valid.
          type: integer
          example: 86400
        accessToken:
          description: |
            A JSON Web Token (JWT) string that contains an authentication token.
            You [present this string when you make
            requests](https://dev.toasttab.com/doc/devguide/authentication.html#using-authentication-token)
            to other Toast API resources. The JWT includes information about your
            Toast API client.
          type: string
        idToken:
          description: |
            For internal use only.
          type: string
        refreshToken:
          description: |
            For internal use only.
          type: string
    ErrorMessage:
      type: object
      description: |
        An object that contains information about one or more errors that the
        Toast platform encountered when processing your API request.
      properties:
        status:
          description: |
            The HTTP status code of the response.
          type: string
        code:
          description: |
            A numeric identifier for the error condition.
          type: integer
        message:
          description: |
            A description of the error condition.
          type: string
        messageKey:
          description: |
            Reserved for future use.
          type: string
        fieldName:
          description: |
            Reserved for future use.
          type: string
        link:
          description: |
            The URL of a resource that provides more information about the error
            condition.
          type: string
        requestId:
          description: |
            The unique identifier of the HTTP request that your client sent to the Toast API.
          type: string
        developerMessage:
          description: |
            Additional detail about the error condition, if it is available.
          type: string
        errors:
          description: |
            A JSON array of `ErrorMessage` objects.
          type: array
          items:
            $ref: "#/components/schemas/ErrorMessage"
        canRetry:
          description: |
            Reserved for future use.
          type: string
    Metadata:
      type: object
      description: |
        Information about the last date and time that this restaurant's menu data was updated.
      properties:
        restaurantGuid:
          description: |
            A unique identifier for this restaurant, assigned by the Toast POS system.
          type: string
          format: uuid
        lastUpdated:
          description: |
            The most recent date and time that this menu's data was published. Use this value to determine if you need to refresh your menu data. The `lastUpdated` value uses the absolute timestamp format describe in the <a href="https://doc.toasttab.com/doc/devguide/api_dates_and_timestamps.html">Dates and timestamps</a> section of the Toast Developer Guide.
          type: string
    RefundDetails:
      type: object
      description: |
        Information about refunded currency amounts for an item
        selection, modifier option, or service charge. The refund
        information includes separate values for the pre-tax value
        being refunded and the tax amount being refunded.
      properties:
        refundAmount:
          description: |
            The value of the menu item or service charge (excluding taxes) being
            refunded. Includes the value of any nested modifier options that
            increased the price of the item or modifier option (an upcharge for
            the modifier option).
          type: number
          format: double
        taxRefundAmount:
          description: |
            The tax amount being refunded.
          type: number
          format: double
        refundTransaction:
          description: |
            An identifier for the refund transaction. You can use the identifier to associate items and service charges that were refunded in the same transaction.
          $ref: "#/components/schemas/ToastReference"
    Refund:
      type: object
      description: A currency amount removed from a guest payment.
      properties:
        refundAmount:
          type: number
          format: double
          description: The amount of the refund, excluding the tip.
        tipRefundAmount:
          type: number
          format: double
          description: The amount of the tip refund.
        refundDate:
          description: The date and time when the refund was made.
          type: string
          format: date-time
        refundBusinessDate:
          description: The business date (yyyyMMdd) on which this refund was created. Response only.
          type: integer
        refundTransaction:
          description: |
            An identifier for the refund transaction. You can use the identifier to associate items and service charges that were refunded in the same transaction.
          $ref: "#/components/schemas/ToastReference"
    Restaurant:
      type: object
      description: |
        Information about the restaurant whose menu data has been retrieved.
      properties:
        restaurantGuid:
          description: |
            A unique identifier for this restaurant, assigned by the Toast POS system.
          type: string
          format: uuid
        lastUpdated:
          description: |
            The most recent date and time that this menu's data was published. Use this value to determine if you need to refresh your menu data. The `lastUpdated` value uses the absolute timestamp format describe in the <a href="https://doc.toasttab.com/doc/devguide/api_dates_and_timestamps.html">Dates and timestamps</a> section of the Toast Developer Guide.
          type: string
        restaurantTimeZone:
          description: |
            The name of the restaurant's time zone in the IANA time zone database https://www.iana.org/time-zones. For example, "America/New_York".
          type: string
        menus:
          type: array
          description: |
            An array of `Menu` objects that represent the published menus used by this restaurant.
          items:
            $ref: "#/components/schemas/Menu"
        modifierGroupReferences:
          type: object
          description: |
            A map of `ModifierGroup` objects that define the modifier groups used by this restaurant. Each `ModifierGroup` object is presented as a key/value pair. A pair's key matches the `referenceId` of the object contained in the pair's value, as shown below:
            ```
            "modifierGroupReferences": {
              "3": {
                "referenceId": 3,
                "name": "Toppings",
                "guid": "58b79986-f88f-411d-ba18-14b1e2441e9d",
                "modifierOptionReferences": [10, 11],
                ...
              },
              "4": {
                "referenceId": 4,
                "name": "Size",
                "guid": "23c02762-9d6a-4d3f-a298-71c989bf31b0",
                "modifierOptionReferences": [12, 13],
                ...
              }
            }
            ```

            Other menu entities refer to modifier groups using their `referenceId`. Having a key that matches the `referenceId` allows you to locate the correct modifier group in the `modifierGroupReferences` map.
          additionalProperties:
            $ref: "#/components/schemas/ModifierGroup"
        modifierOptionReferences:
          type: object
          description: |
            A map of `ModifierOption` objects that define the modifier options used by this restaurant. Each `ModifierOption` object is presented as a key/value pair. A pair's key matches the `referenceId` of the object contained in the pair's value, as shown below:
            ```
            "modifierOptionReferences": {
              "10": {
                "referenceId": 10,
                "name": "Mushrooms",
                "guid": "fa24fee9-76c4-40ba-ae3c-7dfccafdd8d3",
                "price": 1.50,
                ...
              },
              "11": {
                "referenceId": 11,
                "name": "Onions",
                "guid": "afee6be7-8280-4c69-a170-9fdf4c76bf7b",
                "price": 0.75,
                ...
              }
            }
            ```
          additionalProperties:
            $ref: "#/components/schemas/ModifierOption"
        preModifierGroupReferences:
          type: object
          description: |
            A map of `PreModifierGroup` objects that define the premodifier groups used by this restaurant. Each `PreModifierGroup` object is presented as a key/value pair. A pair's key matches the `referenceId` of the object contained in the pair's value, as shown below:
            ```
            "preModifierGroupReferences": {
              "22": {
                "referenceId": 22,
                "guid": "07a1a94d-6f7b-46d5-a916-a07fa16bb8e8",
                "name": "PreModGroup",
                "preModifiers": [
                  {
                    "guid": "ad45e697-9356-468e-b7b4-1b23f4d4b8a5",
                    "name": "EXTRA",
                    "fixedPrice": 1.0,
                    "multiplicationFactor": null
                  }
                ]
              }
            }
            ```
          additionalProperties:
            $ref: "#/components/schemas/PreModifierGroup"
    Menu:
      type: object
      description: |
        Information about a menu configured for this restaurant.
      properties:
        name:
          description: |
            A descriptive name for this menu, for example, "Food" or "Drinks".
          type: string
        guid:
          description: |
            A unique identifier for this menu, assigned by the Toast POS system.
          type: string
        multiLocationId:
          $ref: "#/components/schemas/MultiLocationId"
        masterId:
          $ref: "#/components/schemas/MasterId"
        description:
          description: |
            An optional short description for this menu.
          type: string
        posName:
          $ref: "#/components/schemas/PosName"
        posButtonColorLight:
          $ref: "#/components/schemas/PosButtonColorLight"
        posButtonColorDark:
          $ref: "#/components/schemas/PosButtonColorDark"
        highResImage:
          type: string
          nullable: true
          description: |
            The URL to a high resolution image that has been uploaded for this menu. The image file must be in JPG, PNG, or SVG format. The `highResImage` value is only available if the Toast Kiosk module has been enabled for this restaurant. This value is null if no high resolution image has been specified.
        image:
          $ref: "#/components/schemas/Image"
        visibility:
          $ref: "#/components/schemas/Visibility"
        availability:
          $ref: "#/components/schemas/Availability"
        menuGroups:
          type: array
          description: |
            An array of the `MenuGroup` objects contained in this menu.
          minItems: 0
          items:
            $ref: "#/components/schemas/MenuGroup"
    MenuGroup:
      type: object
      description: |
        Information about a menu group configured for this restaurant, including an array of menu items contained in the group.
      properties:
        name:
          description: |
            A descriptive name for this menu group, for example, "Appetizers" or "Sandwiches".
          type: string
        guid:
          description: |
            A unique identifier for this menu group, assigned by the Toast POS system.
          type: string
        multiLocationId:
          $ref: "#/components/schemas/MultiLocationId"
        masterId:
          $ref: "#/components/schemas/MasterId"
        description:
          description: |
            An optional short description of this menu group.
          type: string
        posName:
          $ref: "#/components/schemas/PosName"
        posButtonColorLight:
          $ref: "#/components/schemas/PosButtonColorLight"
        posButtonColorDark:
          $ref: "#/components/schemas/PosButtonColorDark"
        image:
          $ref: "#/components/schemas/Image"
        visibility:
          $ref: "#/components/schemas/Visibility"
        itemTags:
          type: array
          description: |
            An array of `ItemTag` objects that are assigned to this menu group. Item tags are used to assign identifying characteristics, for example, vegetarian, gluten-free, or alcohol.
          items:
            $ref: "#/components/schemas/ItemTag"
        menuGroups:
          type: array
          description: |
            An array of the `MenuGroup` objects that are children of this menu group. The array is empty if the menu group has no child menu groups.
          minItems: 0
          items:
            $ref: "#/components/schemas/MenuGroup"
        menuItems:
          type: array
          description: |
            An array of the `MenuItem` objects contained in this menu group.
          minItems: 0
          items:
            $ref: "#/components/schemas/MenuItem"
    MenuItem:
      type: object
      description: |
        Information about a menu item configured for this restaurant.
      properties:
        name:
          description: |
            A descriptive name for this menu item, for example, "Caesar Salad" or "Turkey Sandwich".
          type: string
        kitchenName:
          type: string
          description: |
            The name of the menu item as it appears on kitchen tickets. The `kitchenName` can include both numbers and letters. This value contains an empty string if a kitchen name has not been configured for the menu item.
        guid:
          description: |
            A unique identifier for this menu item, assigned by the Toast POS system.
          type: string
        multiLocationId:
          $ref: "#/components/schemas/MultiLocationId"
        masterId:
          $ref: "#/components/schemas/MasterId"
        description:
          description: |
            An optional short description of this menu item.
          type: string
        posName:
          $ref: "#/components/schemas/PosName"
        posButtonColorLight:
          $ref: "#/components/schemas/PosButtonColorLight"
        posButtonColorDark:
          $ref: "#/components/schemas/PosButtonColorDark"
        image:
          $ref: "#/components/schemas/Image"
        visibility:
          $ref: "#/components/schemas/Visibility"
        price:
          type: number
          format: double
          nullable: true
          description: |
            The price of this menu item.

            In Toast Web, menu items may have prices assigned to them individually, or they may inherit them from a parent menu group. The `price` value reflects the menu item's fully resolved pricing configuration in the following ways:

              * For base prices, the `price` value is populated with the specified base price.
              
              * For menu-specific prices, the `price` value is resolved based on the current menu. For example, consider a menu item that is included in both Lunch and Dinner menus and is priced at $10 for the Lunch menu and $12 for the Dinner menu. In the fully resolved JSON returned by the menus API, this menu item would appear twice, once as a child of the Lunch menu with a `price` value of $10, and again as a child of the Dinner menu with a `price` value of $12.
              
              If this same menu item is added to a Breakfast menu but a menu-specific price is not defined for the Breakfast menu, then the `price` value for the instance of the menu item that appears in the Breakfast menu JSON is populated with the base price from the menu-specific price configuration. Menu-specific price configurations include a base price that functions as a default price when a menu-specific price cannot be resolved.

              * For location-specific prices, the `price` value is resolved based on the current location. For example, consider a menu item that costs $15 in the Boston location and $20 in the New York location. When you retrieve menu data for the Boston location, this menu item's `price` value is $15. When you retrieve menu data for the New York location, the menu item's `price` value is $20.
              
              * For time-specific prices, the `price` value is populated with the base price that is specified as part of the time-specific price configuration. This base price functions as a default price for the menu item during times of the day when a time-specific price has not been defined. For example, consider a menu item that costs $8 from noon to 2pm and $10 during the rest of the day. The `price` value for this item would be $10. You must use the `pricingStrategy` and `pricingRules` values for this menu item to calculate the price of the item during time periods for which a time-specific price has been defined.
              
              * For size prices, the `price` value is null. You must use this menu item's `pricingStrategy` and `pricingRules` values to calculate the price of the item for different sizes.
              
              * For open prices, the `price` value is null.

              
              If the menu item is priced using a price level, the `price` value reflects the pricing strategy used for that price level, using the same logic described above. For example, consider a price level that applies a size price to the menu items it is assigned to. In this scenario, the `price` value is null and you must use the menu item's `pricingStrategy` and `pricingRules` values to calculate the price of the item for different sizes.

              For more information on menu item pricing and pricing strategies, see the <a href="https://doc.toasttab.com/doc/platformguide/adminToastPosPricingFeatures.html">Menu Pricing</a> section in the Toast Platform Guide.
        pricingStrategy:
          type: string
          enum:
            - BASE_PRICE
            - MENU_SPECIFIC_PRICE
            - TIME_SPECIFIC_PRICE
            - SIZE_PRICE
            - OPEN_PRICE
          description: |
            A string that represents the pricing strategy used for this menu item.

            You use the `pricingStrategy` value, in conjunction with the `pricingRules` value, to calculate the price for a menu item that uses the Time Specific Price or Size Price pricing strategy.

            In Toast Web, menu items may have pricing strategies assigned to them individually, or they may inherit them from a parent menu group. The `pricingStrategy` value indicates the menu item's fully resolved pricing strategy. If the menu item is priced using the:
              * Base Price pricing strategy, then the `pricingStrategy` value is BASE_PRICE.
              * Menu Specific Price pricing strategy, then the `pricingStrategy` value is MENU_SPECIFIC_PRICE.
              * Time Specific Price pricing strategy, then the `pricingStrategy` value is TIME_SPECIFIC_PRICE.
              * Size Price pricing strategy, then the `pricingStrategy` value is SIZE_PRICE.
              * Open Price pricing strategy, then the `pricingStrategy` value is OPEN_PRICE.

            If the menu item is priced using the Location Specific Price pricing strategy, then the `pricingStrategy` value indicates which pricing strategy is used at the current location. For example, consider a menu item that uses a menu-specific price at the Boston location and a base price at the New York location. When you retrieve the menu data for the Boston location, the `pricingStrategy` for the menu item is MENU_SPECIFIC_PRICE. When you retrieve menu data for the New York location, the `pricingStrategy` for the menu item is BASE_PRICE.

            If the menu item is priced using a price level, then the `pricingStrategy` value indicates which pricing strategy is used for that price level. For example, if the "Draft Beer" pricing level uses a time-specific price, then the `pricingStrategy` value for a menu item that is assigned the "Draft Beer" pricing level is TIME_SPECIFIC_PRICE.

            If the `pricingStrategy` value is BASE_PRICE or MENU_SPECIFIC_PRICE, you can retrieve the menu item's price from its `price` value.

            If the `pricingStrategy` value is TIME_SPECIFIC_PRICE or SIZE_PRICE, you must use the rules provided in _this menu item's_ `pricingRules` value to calculate the price for it.
        pricingRules:
          $ref: "#/components/schemas/PricingRules"
        isDeferred:
          type: boolean
          description: |
            Indicates whether this menu item should be considered deferred revenue.
        isDiscountable:
          type: boolean
          description: |
            Indicates whether this menu item can be discounted.

            **_Important_** The orders API _does not validate_ against the `isDiscountable` value. If you submit an order that applies a discount to a menu item whose `isDiscountable` value is FALSE, the orders API will not fail the order but it will set the discount amount on the menu item to $0.00. If you are using the menus API to build an ordering application, be sure to inspect the `isDiscountable` value of the menu items to ensure that your ordering application does not allow an item to be discounted if its `isDiscountable` value is FALSE.
        salesCategory:
          $ref: "#/components/schemas/SalesCategory"
        taxInfo:
          type: array
          description: |
            An array of GUIDs for the tax rates that apply to this menu item.

            Note that a menu item's tax rates may get overridden if a modifier option is applied to it and that modifier option is configured so that it overrides its parent menu item's tax rates. See <a href="https://doc.toasttab.com/doc/devguide/apiUsingTaxInfoAndModifierOptionTaxInfoToCalculateTaxesForMenuItemsAndModOptions.html">Using taxInfo and modifierOptionTaxInfo to calculate taxes for menu items and modifier options</a> in the Toast Developer Guide for more information.   
                      
            To retrieve full configuration data for a tax rate, use the `/taxRates/{guid}` endpoint in the configuration API.

            _Important:_ The `taxInfo` value is intended to help you display prices but the `/prices` endpoint of the orders API is the only supported way to determine the prices of orders that you submit to the orders API. See <a href="https://doc.toasttab.com/doc/devguide/apiOrderPrices.html">Order prices</a> in the Toast Developer Guide for more information.
          items:
            type: string
        taxInclusion:
          type: string
          enum:
            - TAX_INCLUDED
            - TAX_NOT_INCLUDED
            - SMART_TAX
          description: |
            A string that represents the tax inclusion setting for this menu item. Possible values include:

            * `TAX_INCLUDED`: The menu item's price includes taxes. You should not display additional tax on top of the menu item price in your ordering UI.
            * `TAX_NOT_INCLUDED`: The menu item's price does not include taxes. You should display tax values alongside the menu item price in your ordering UI.
            * `SMART_TAX`: The menu item is using smart tax, a feature that allows a restaurant to configure menu item prices to include or not include taxes, depending on the section of the restaurant that the item is ordered in (for example, the bar or the dining room). For example, a guest can order an item at either the bar or in the main dining room. To prevent bartenders from having to handle coins, which can slow down service, and to make tipping easier, the restaurant wants the price of the item to be a whole number that includes tax when it is ordered at the bar. In the main dining room, where speed of service is less of a concern, the restaurant doesn't want the item's price to include tax, so that it doesn't lose out on the extra revenue.

            Typically, the smart tax setting is used for in-store workflows where the efficiency of money handling is a priority. As such, it doesn't apply to online ordering integrations. If a menu item's `taxInclusion` value is set to `SMART_TAX`, your ordering integration should treat the menu item as if tax is not included. For more information on the smart tax feature, see <a href="https://doc.toasttab.com/doc/platformguide/adminSmartTax.html">Smart tax</a> in the Toast Platform Guide.

            _Note:_ A menu item's tax inclusion setting is inherited by any modifiers that are applied to that menu item. For more information, see <a href="https://doc.toasttab.com/doc/platformguide/adminTaxesOnModifiers.html#adminModifierTaxInteraction">Tax functionality interaction</a> in the Toast Platform Guide.
        itemTags:
          type: array
          description: |
            An array of `ItemTag` objects that are assigned to this menu item. Item tags are used to assign identifying characteristics to a menu item, for example, vegetarian, gluten-free, or alcohol.
          items:
            $ref: "#/components/schemas/ItemTag"
        plu:
          type: string
          description: |
            The price lookup (PLU) code for this menu item. The PLU code can include both numbers and letters. This value contains an empty string if a PLU code has not been defined.
        sku:
          type: string
          description: |
            The stock keeping unit (SKU) identifier for this menu item. The SKU identifier can include both numbers and letters. This value contains an empty string if a SKU has not been defined.
        calories:
          type: integer
          nullable: true
          description: |
            The number of calories in this menu item. The calories value can be any positive or negative integer, or zero. This value is null if a calories amount has not been configured for the menu item.
        contentAdvisories:
          $ref: "#/components/schemas/ContentAdvisories"
        unitOfMeasure:
          type: string
          enum:
            - NONE
            - LB
            - OZ
            - KG
            - G
          description: |
            The unit of measure used to determine the price of the item. For example, $10.00 per gram.
        portions:
          type: array
          description: |
            An array of `Portion` objects that define the portions that can be used with this menu item. For example, for a pizza menu item, you could define 1st Half and 2nd Half portions. See <a href="https://doc.toasttab.com/doc/platformguide/adminPortionsOverview.html">Portions overview</a> in the Toast Platform Guide for more information on portions.
          minItems: 0
          items:
            $ref: "#/components/schemas/Portion"
        prepTime:
          type: integer
          format: int32
          nullable: true
          description: |
            The amount of time, in seconds, that it takes to prepare this menu item. This value is null if a prep time has not been specified for the menu item.<br>
            <br>
            *Related topics*<br>
            <a href="https://doc.toasttab.com/doc/platformguide/adminFireByPrepTime.html">Using prep times to automate item firing</a><br>
        prepStations:
          type: array
          description: |
            An array of GUIDs for the prep stations that have been assigned to this menu item. This array is empty if no prep stations have been assigned.<br>
            <br>
            *Related topics:*<br>
            <a href="https://doc.toasttab.com/doc/platformguide/platformKitchenRoutingOverview.html">Routing to prep stations</a>
          items:
            type: string
        modifierGroupReferences:
          type: array
          description: |
            An array of `referenceId`s for `ModifierGroup` objects. These objects define the modifier groups that apply to this menu item.
          minItems: 0
          items:
            type: integer
        eligiblePaymentAssistancePrograms:
          type: array
          description: |
            An array of strings that indicate which payment assistance programs may be used to pay for this menu item. Possible values include:

            * `SNAP`: Supplemental Nutrition Assistance Program
            * `EBT_CASH`: Electronic Benefit Transfer Cash

            The array is empty if no payment assistance programs have been assigned to the menu item.
          items:
            type: string
        length:
          $ref: "#/components/schemas/Length"
        height:
          $ref: "#/components/schemas/Height"
        width:
          $ref: "#/components/schemas/Width"
        dimensionUnitOfMeasure:
          $ref: "#/components/schemas/DimensionUnitOfMeasure"
        weight:
          $ref: "#/components/schemas/Weight"
        weightUnitOfMeasure:
          $ref: "#/components/schemas/WeightUnitOfMeasure"
        images:
          $ref: "#/components/schemas/Images"
        guestCount:
          $ref: "#/components/schemas/GuestCount"
    ModifierGroup:
      type: object
      description: |
        Information about a modifier group configured for this restaurant, including an array of modifier options contained in the group.
      properties:
        name:
          description: |
            A descriptive name for this modifier group, for example, "Pizza Toppings" or "Salad Dressings".
          type: string
        guid:
          description: |
            A unique identifier for this modifier group, assigned by the Toast POS system.
          type: string
        referenceId:
          description: |
            An integer identifier that is used to refer to this modifier group by items and portions that use it.
          type: integer
        multiLocationId:
          $ref: "#/components/schemas/MultiLocationId"
        masterId:
          $ref: "#/components/schemas/MasterId"
        posName:
          $ref: "#/components/schemas/PosName"
        posButtonColorLight:
          $ref: "#/components/schemas/PosButtonColorLight"
        posButtonColorDark:
          $ref: "#/components/schemas/PosButtonColorDark"
        visibility:
          $ref: "#/components/schemas/Visibility"
        pricingStrategy:
          type: "string"
          description: |
            A string that represents the pricing strategy used for this modifier group.

            If there is no additional charge for the modifier options in this group, or if the modifier options in the group are priced individually, then the `pricingStrategy` value is NONE.

            If the modifier group is priced at the group level and is using the:
              * Fixed Price pricing strategy, then the `pricingStrategy` value is NONE.
              * Sequence Price pricing strategy, then the `pricingStrategy` value is SEQUENCE_PRICE.
              * Size Price pricing strategy, then the `pricingStrategy` value is SIZE_PRICE.
              * Size/Sequence Price pricing strategy, then the `pricingStrategy` value is SIZE_SEQUENCE_PRICE.

              
            If the `pricingStrategy` value is NONE,  then the prices for the modifier options in this group are resolved down to the modifier option level and you can retrieve them from the `price` value of the individual `ModifierOption` objects.

            If the `pricingStrategy` value is SIZE_PRICE, SEQUENCE_PRICE, or SIZE_SEQUENCE_PRICE, then you must use the rules provided in _this modifier group's_ `pricingRules` value to calculate the prices for the modifier options in the group.
        pricingRules:
          $ref: "#/components/schemas/PricingRules"
        defaultOptionsChargePrice:
          description: |
            Indicates whether the prices associated with any default modifiers in this group are added to the cost of the menu items they modify.

            Values are:
              * NO: The default modifier price is ignored. No change is made to the cost of the menu item.
              * YES: The default modifier price is added to the menu item price. YES is the default setting for `defaultOptionsChargePrice`.
          type: string
          enum:
            - "NO"
            - "YES"
        defaultOptionsSubstitutionPricing:
          description: |
            Indicates whether substitution pricing is enabled for the modifier group.
          type: string
          enum:
            - "NO"
            - "YES"
        minSelections:
          type: integer
          description: |
            The minimum number of modifier options that a customer can choose from this modifier group.

            If a server is not required to select a modifier option from this modifier group, `minSelections` is set to 0.

            If a server must select a modifier option from this modifier group, `minSelections` must be set to 1 or higher.
        maxSelections:
          type: integer
          nullable: true
          description: |
            The maximum number of modifier options that a customer can choose from this modifier group. `maxSelections` is null if a customer can choose an unlimited number of modifier options from this modifier group.
        requiredMode:
          description: |
            Specifies how the modifier group appears and behaves in the Toast POS app.
          type: string
          enum:
            - REQUIRED
            - OPTIONAL_FORCE_SHOW
            - OPTIONAL
        isMultiSelect:
          type: boolean
          description: |
            Indicates whether you can select more than one modifier option from this modifier group.
        preModifierGroupReference:
          type: integer
          nullable: true
          description: |
            The `referenceId` of a `PreModifierGroup` object. This object defines the premodifiers that can be applied to the modifier options contained in this modifier group.
        modifierOptionReferences:
          type: array
          description: |
            An array of `referenceId`s for `ModifierOption` objects. These objects define the modifier options contained in this modifier group.
          minItems: 0
          items:
            type: integer
    ModifierOption:
      type: object
      description: |
        Information about a modifier option configured for this restaurant.
      properties:
        referenceId:
          description: |
            An integer identifier that is used to refer to this modifier option by modifier option groups that contain it.
          type: integer
        name:
          description: |
            A descriptive name for this modifier option, for example, "Cheese" or "Pepperoni".
          type: string
        kitchenName:
          description: |
            The name of the modifier option as it appears on kitchen tickets. The `kitchenName` can include both numbers and letters. This value contains an empty string if a kitchen name has not been configured for the modifier option.
          type: string
        guid:
          description: |
            A unique identifier for this modifier option's item reference, assigned by the Toast POS system.
          type: string
        multiLocationId:
          $ref: "#/components/schemas/MultiLocationId"
        masterId:
          $ref: "#/components/schemas/MasterId"
        description:
          description: |
            An optional short description of this modifier option.
          type: string
        posName:
          $ref: "#/components/schemas/PosName"
        posButtonColorLight:
          $ref: "#/components/schemas/PosButtonColorLight"
        posButtonColorDark:
          $ref: "#/components/schemas/PosButtonColorDark"
        prepStations:
          type: array
          description: |
            An array of GUIDs for the prep stations that have been assigned to this modifier option.
          items:
            type: string
        image:
          $ref: "#/components/schemas/Image"
        visibility:
          $ref: "#/components/schemas/Visibility"
        price:
          type: number
          format: double
          nullable: true
          description: |
            The price of this modifier option.

            In Toast Web, a modifier option may:
              * Inherit its price from a parent modifier group.
              * Use the price specified for its modifier option item reference.
              * Specify a price that overrides the price defined for its item reference.

            The `price` value is populated differently depending on which of these pricing scenarios is used for the modifier option.
        pricingStrategy:
          type: string
          description: |
            A string that indicates how this modifier option has been priced. If `pricingStrategy` is:
              * GROUP_PRICE, then the modifier option inherits its price from a parent modifier group.
              * Any value other than GROUP_PRICE, then the modifier option is using either the price specified for its item reference or an override price.
        pricingRules:
          $ref: "#/components/schemas/PricingRules"
        salesCategory:
          $ref: "#/components/schemas/SalesCategory"
        taxInfo:
          type: array
          description: |
            The `taxInfo` value on the `ModifierOption` object has been deprecated. Your integration should switch to using the `modifierOptionTaxInfo` value instead.
          items:
            type: string
        modifierOptionTaxInfo:
          $ref: "#/components/schemas/ModifierOptionTaxInfo"
        itemTags:
          type: array
          description: |
            An array of `ItemTag` objects that are assigned to this modifier option. Item tags are used to assign identifying characteristics to a modifier option, for example, vegetarian, gluten-free, alcohol.
          items:
            $ref: "#/components/schemas/ItemTag"
        plu:
          type: string
          description: |
            The price lookup (PLU) code for this modifier option. The PLU code can contain both numbers and letters. This value contains an empty string if a PLU code has not been defined.
        sku:
          type: string
          description: |
            The stock keeping unit (SKU) identifier for this modifier option. The SKU identifier can contain both numbers and letters. This value contains an empty string if a SKU has not been defined.
        calories:
          type: integer
          nullable: true
          description: |
            The number of calories in this modifier option. The calories value can be any positive or negative integer, or zero. This value is null if a calories amount has not been configured for the modifier option.
        contentAdvisories:
          $ref: "#/components/schemas/ContentAdvisories"
        unitOfMeasure:
          type: string
          enum:
            - NONE
            - LB
            - OZ
            - KG
            - G
          description: |
            The unit of measure used to determine the price of the modifier option. For example, $10.00 per gram.
        isDefault:
          type: boolean
          description: |
            Indicates whether this modifier option is included on the menu item by default.
        allowsDuplicates:
          type: boolean
          description: |
            Indicates whether the modifier option may be added to a menu item multiple times.
        portions:
          type: array
          description: |
            An array of `Portion` objects that define the portions that this modifier option can be added to.
          minItems: 0
          items:
            $ref: "#/components/schemas/Portion"
        prepTime:
          type: integer
          format: int32
          nullable: true
          description: |
            The amount of time, in seconds, that it takes to prepare this modifier option. This value is null if a prep time has not been specified for the modifier option.
        modifierGroupReferences:
          type: array
          description: |
            An array of `referenceId`s for `ModifierGroup` objects. These objects define nested modifier groups contained in this modifier option.
          minItems: 0
          items:
            type: integer
        length:
          $ref: "#/components/schemas/Length"
        height:
          $ref: "#/components/schemas/Height"
        width:
          $ref: "#/components/schemas/Width"
        dimensionUnitOfMeasure:
          $ref: "#/components/schemas/DimensionUnitOfMeasure"
        weight:
          $ref: "#/components/schemas/Weight"
        weightUnitOfMeasure:
          $ref: "#/components/schemas/WeightUnitOfMeasure"
        images:
          $ref: "#/components/schemas/Images"
        guestCount:
          $ref: "#/components/schemas/GuestCount"
    PreModifierGroup:
      type: object
      description: |
        Information about a pre-modifier group configured for this restaurant, including an array of pre-modifiers contained in the group.
      properties:
        name:
          type: string
          description: |
            A descriptive name for this pre-modifier group, for example, "Sandwich Pre-mods".
        guid:
          description: |
            A unique identifier for this pre-modifier group, assigned by the Toast POS system.
          type: string
        multiLocationId:
          $ref: "#/components/schemas/MultiLocationId"
        preModifiers:
          description: |
            An array of `PreModifier` objects that are contained in this pre-modifier group. Pre-modifiers alter the display of modifier options on receipts and tickets to satisfy guest requests such as EXTRA or ON THE SIDE for modifier options. Pre-modifiers can also be configured to modify the cost of the modifier options they are applied to, for example, by charging more for an EXTRA serving of a modifier option.
          type: array
          items:
            $ref: "#/components/schemas/PreModifier"
    PreModifier:
      type: object
      description: |
        Information about a pre-modifier configured for this restaurant.
      properties:
        name:
          type: string
          description: |
            A descriptive name for this pre-modifier, for example, "NO" or "EXTRA".
        guid:
          description: |
            A unique identifier for this pre-modifier group, assigned by the Toast POS system.
          type: string
        multiLocationId:
          $ref: "#/components/schemas/MultiLocationId"
        fixedPrice:
          description: |
            An optional fixed price for this pre-modifier. The fixed price is added to the cost of the modifier option that the pre-modifier is applied to.

            A PreModifier object has two optional values, `fixedPrice` and `multiplicationFactor`, that both alter the price of a modifier option when the pre-modifier is applied to it. However, these values cannot be used at the same time. If you specify a `fixedPrice` value for a premodifier, then `multiplicationFactor` is null. If you specify a `multiplicationFactor` for a pre-modifier, then `fixedPrice` is null. If you choose not to assign either a fixed price or a multiplication factor to a pre-modifier, then the `fixedPrice` value is 0 and the `multiplicationFactor` is null.
          type: number
          format: double
          nullable: true
        multiplicationFactor:
          description: |
            An optional number that specifies how much the cost of a modifier option is multiplied by when this pre-modifier is applied to it. For example, an EXTRA pre-modifier option could specify a `multiplicationFactor` of 1.5 to indicate that adding extra cheese to a menu item costs one and a half times the regular price of the cheese modifier option.

            A PreModifier object has two optional values, `fixedPrice` and `multiplicationFactor`, that both alter the price of a modifier option when the pre-modifier is applied to it. However, these values cannot be used at the same time. If you specify a `fixedPrice` value for a premodifier, then `multiplicationFactor` is null. If you specify a `multiplicationFactor` for a premodifier, then `fixedPrice` is null. If you choose not to assign either a fixed price or a multiplication factor to a pre-modifier, then the `fixedPrice` value is 0 and the `multiplicationFactor` is null.
          type: number
          format: double
          nullable: true
        displayMode:
          description: |
            The display mode for this pre-modifier option.
          type: string
          enum:
            - PREFIX
            - SUFFIX
    Order:
      type: object
      description: |
        A Toast platform order is composed of one or more checks. Each check has 
        one or more menu item selections.
      allOf:
        - $ref: "#/components/schemas/ExternalReference"
        - type: object
          required:
            - checks
          properties:
            openedDate:
              description: |
                The business date of the order.

                For dine-in and as soon as possible (ASAP) orders, `openedDate` should match `createdDate`.

                For scheduled orders, `openedDate` should match `promisedDate`.

                If you do not provide a value for 
                `openedDate` value when you `POST` a new order, the
                business date of the order is set to the restaurant
                business day that corresponds to the current date and
                time.

                The business date of an order is affected by the
                business date cutoff time for a restaurant, which is
                available from the restaurants API in the `closeoutHour` property.
              type: string
              format: date-time
              example: 2025-02-07T08:00:00.000-0800
            modifiedDate:
              type: string
              format: date-time
              description: The most recent date that the order, or a check or menu item selection in the order, was modified.
              example: 2025-02-07T08:00:00.000-0800
            promisedDate:
              description: |
                For scheduled orders, the date and time that the order is scheduled to be fulfilled.

                For dine-in and as soon as possible (ASAP) orders, `promisedDate` is `null`.
              type: string
              format: date-time
              example: 2025-05-01T08:00:00.000-0800
            channelGuid:
              description: |
                Reserved for future use.
              type: string
              format: uuid
            diningOption:
              description: The restaurant-configured dining option that applies to this order.
              $ref: "#/components/schemas/ExternalReference"
            checks:
              type: array
              description: |
                The checks for this order. Most orders have one check.

                If the check is split, then there are multiple checks.
              minItems: 1
              items:
                $ref: "#/components/schemas/Check"
            table:
              description: |
                The restaurant table at which this order was placed.
              $ref: "#/components/schemas/ExternalReference"
            serviceArea:
              description: The service area. Response only.
              $ref: "#/components/schemas/ExternalReference"
            restaurantService:
              description: The applicable meal service. For example, lunch or dinner. Response only.
              $ref: "#/components/schemas/ExternalReference"
            revenueCenter:
              description: |
                The division or section of a restaurant that the order is
                fulfilled in.

                You use revenue centers to analyze financial reporting information.
              $ref: "#/components/schemas/ExternalReference"
            source:
              type: string
              description: |
                Indicates the way that the order was placed.

                Valid values:

                * `In Store`
                * `Online`
                * `Order-and-Pay-at-Table`
                * `API`
                * `Kiosk`
                * `Caller Id`
                * `Google`
                * `Invoice`
                * `Toast Pickup App`
                * `Toast Local`
                * `Branded Online Ordering`
                * `Catering`
                * `Catering Online Ordering`
                * `Toast Tables`
                * `eCommerce Online ordering`
                * `Branded Mobile App
                * `Grubhub` (deprecated)

                Response only.
            duration:
              type: integer
              description: The number of seconds between creation and payment. Response only.
            deliveryInfo:
              description: Delivery information related to orders with a `DELIVERY` dining option.
              $ref: "#/components/schemas/DeliveryInfo"
            requiredPrepTime:
              type: string
              format: ISO-8601
              description: |
                The amount of time that it will take to prepare the order. This value overrides the 
                default `deliveryPrepTime` or `takeoutPrepTime` that normally controls auto-firing for scheduled orders.

                You can use `requiredPrepTime` to handle atypical orders that will take more time than usual for a restaurant to prepare.

                Express the required preparation time in ISO-8601 duration format. Must be greater than zero and be an 
                increment of five minutes. For example, the value "PT15M" sets the required preparation time for the order to 15 minutes.
            estimatedFulfillmentDate:
              type: string
              format: date-time
              description: |
                The date and time that the order is expected to be ready for pickup or to be delivered.

                This value is only set when the order dining option uses the `DELIVERY` or `TAKE_OUT` dining behavior. For other dining options, the value is `null`.

                Response only.
              example: 2025-05-01T08:00:00.000-0800
            numberOfGuests:
              type: integer
              description: |
                The number of restaurant guests that are associated with the
                order. For example, for a dine-in order, this might be the
                number of guests at a table.
            voided:
              type: boolean
              description: Set to `true` if this order was voided. Response only.
            voidDate:
              type: string
              format: date-time
              description: The date on which this order was voided. Response only.
              example: 2025-02-07T08:00:00.000-0800
            voidBusinessDate:
              type: integer
              description: The business date (yyyyMMdd) on which this order was voided. Response only.
            paidDate:
              type: string
              format: date-time
              description: The most recent date on which this order received payment. If not specified when `POST`ing, it is set to the current system time.
              example: 2025-02-07T08:00:00.000-0800
            closedDate:
              type: string
              format: date-time
              description: |
                The most recent date on which the order payment status changed to `CLOSED`.

                This status is not returned for the order. The order is simply `CLOSED` when all of the checks on the order are `CLOSED`.
              example: 2025-02-07T08:00:00.000-0800
            deletedDate:
              type: string
              format: date-time
              description: |
                The date and time when the order was deleted.

                The `deletedDate` value only
                applies when the `deleted` value is `true`.

                If `deleted` is `false`, the value
                of `deletedDate` is the UNIX epoch, `1970-01-01T00:00:00.000+0000`.
              example: 2025-02-07T08:00:00.000-0800
            deleted:
              type: boolean
              description: |
                Set to `true` if this order is deleted. Response only.

                For example, if you combine a
                check into another order, the original order for the check is deleted.
            businessDate:
              type: integer
              description: The business date (yyyyMMdd) on which the order was fulfilled. Response only.
            appliedPackagingInfo:
              description: |
                Information describing the guest's packaging preferences for this order, for example utensils, napkins, condiments.

                For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiOrdersPackagingPreferences.html">Packaging preferences</a>
              $ref: "#/components/schemas/AppliedPackagingInfo"
            approvalStatus:
              type: string
              description: |
                The current state of the order in the restaurant order
                fulfillment process. For example, the `approvalStatus`
                can indicate that an order is waiting for a restaurant
                employee to approve it or that the order is in a
                restaurant kitchen being fulfilled. Response only.

                Valid values:

                * `NEEDS_APPROVAL` - The order is created but will
                not be fulfilled by the restaurant until an employee
                approves it.

                * `APPROVED` - The order is being fulfilled by the
                restaurant or it was fulfilled in the past. Orders
                remain in this state indefinitely after they are
                fulfilled.

                * `FUTURE` - The order is expected to be fulfilled by the
                restaurant at a future date and time. Restaurant
                employees will receive information about the order at the
                date and time that it is ready to be fulfilled.

                * `NOT_APPROVED` - Restaurant employees received
                information about the order but did not approve it for
                fulfillment. An order enters this state after a period of
                time passes without a restaurant employee approving it.
              enum:
                - NEEDS_APPROVAL
                - APPROVED
                - FUTURE
                - NOT_APPROVED
            createdDevice:
              description: The Toast POS device that created the order. This value is `null` if the order was not created using a Toast POS device.
              $ref: "#/components/schemas/Device"
            createdInTestMode:
              type: boolean
              description: |
                Indicates whether the order was created while the restaurant was
                in test mode.

                For more information, see [this _Toast Central_
                article](https://central.toasttab.com/s/article/Test-Mode-Enable-and-Disable-1492802389999)
            curbsidePickupInfo:
              description: |
                Information that the restaurant can use to identify a guest when they arrive outside the restaurant to pick up their order.
              $ref: "#/components/schemas/CurbsidePickupInfo"
            deliveryServiceInfo:
              description: |
                Reserved for future use.
              $ref: "#/components/schemas/DeliveryServiceInfo"
            displayNumber:
              type: string
              description: Response only. Generally starts at one each day and counts up. Not guaranteed to be unique, can be empty if unset.
            excessFood:
              type: boolean
              description: |
                Indicates whether the order was created to track excess food (for example, food waste) rather than a 
                standard guest order. Response only.

                For more information on the differences between guest orders and excess food orders, see 
                <a href="https://doc.toasttab.com/doc/devguide/apiDailyOrderForTrackingExcessFood.html">Daily order for tracking excess food</a>.
            guestOrderStatus:
              type: string
              description: |
                Reserved for future use.
            initialDate:
              description: Reserved for future use. Do not use the `initialDate` value for integration development.
              type: integer
              format: int64
            lastModifiedDevice:
              description: |
                The Toast POS device that modified the order most recently. This value is `null` if the order was never modified using a Toast POS device.

                If the order is modified but the modification was not made using a Toast POS device, this value does not change.
              $ref: "#/components/schemas/Device"
            marketplaceFacilitatorTaxInfo:
              description: |
                Information about the taxes that a marketplace
                facilitator organization remits on behalf of a Toast
                platform restaurant.

                `POST` only. The orders API does not
                include the `marketplaceFacilitatorTaxInfo` value in
                response data.

                **Note**: you can only include this information if your
                Toast API client is associated with a designated
                marketplace facilitator organization. Most Toast API
                clients do not create marketplace facilitator orders.
              $ref: "#/components/schemas/MarketplaceFacilitatorTaxInfo"
            pricingFeatures:
              type: array
              description: Pricing features that this order is using.
              items:
                type: string
                description: A specific pricing feature used to price out the order.
                enum:
                  - TAXESV2
                  - TAXESV3
            server:
              description: The restaurant employee, or server, who is assigned to the order.
              $ref: "#/components/schemas/ExternalReference"
            createdDate:
              description: The date and time that the Toast platform received the order.
              type: string
              format: date-time
    OrderResponse:
      type: object
      properties:
        orders:
          type: array
          minItems: 0
          maxItems: 1
          items:
            $ref: "#/components/schemas/Order"
    Check:
      type: object
      description: Represents a single check within an order.
      allOf:
        - $ref: "#/components/schemas/ExternalReference"
        - type: object
          required:
            - selections
          properties:
            createdDate:
              description: The date and time that the Toast platform received the check.
              type: string
              format: date-time
            openedDate:
              description: The date on which this check was opened. If not specified, it is set to the current system time.
              type: string
              format: date-time
            closedDate:
              type: string
              format: date-time
              description: The most recent date on which this check's payment status was set to `CLOSED`.
            modifiedDate:
              type: string
              format: date-time
              description: The most recent date on which this check was modified.
            deletedDate:
              type: string
              format: date-time
              description: |
                The date on which this check was deleted.

                `deletedDate` is only applicable when `deleted` is true.

                If `deleted` is false, then `deletedDate` is set to the UNIX epoch, `1970-01-01T00:00:00.000+0000`.
            deleted:
              type: boolean
              description: Set to `true` if this check was deleted.
            selections:
              type: array
              items:
                $ref: "#/components/schemas/Selection"
            customer:
              description: |
                A `Customer` object
                that holds information about a restaurant guest
                that is associated with the check.

                Required for `POST` requests for orders that use the
                takeout or delivery dining options.

                For checks that apply or accrue Toast loyalty points, a
                `GET` request returns a `Customer` object
                even when restaurant employees do not enter guest
                information for a check. In this case, the `Customer` object
                contains only the Toast platform GUID of the guest.
                All other values are `null`.
              $ref: "#/components/schemas/Customer"
            appliedLoyaltyInfo:
              description: Information about the customer loyalty program account associated with the check. Used to accrue loyalty program benefits and to redeem loyalty program discounts.
              $ref: "#/components/schemas/AppliedLoyaltyInfo"
            taxExempt:
              type: boolean
              default: false
              description: Set to `true` if this check is tax exempt.
            displayNumber:
              type: string
              description: Generally starts at one each day and counts up. The Toast platform fills this in if it is not specified when the order is POSTed. Not guaranteed to be unique.
            appliedServiceCharges:
              type: array
              description: Any restaurant-configured service charges that applied to this check.
              items:
                $ref: "#/components/schemas/AppliedServiceCharge"
            amount:
              type: number
              format: double
              description: The total calculated price of the check including discounts and service charges. The `amount` does not include gratuity or taxes. Response only.
            taxAmount:
              type: number
              format: double
              description: The calculated tax amount. Includes service charge and item level taxes. Response only.
            totalAmount:
              type: number
              format: double
              description: The total calculated price of this check including discounts and taxes. Not affected by refunds.
            payments:
              type: array
              description: Payments made on this check.
              minItems: 0
              items:
                $ref: "#/components/schemas/Payment"
            tabName:
              type: string
              description: |
                The name of the tab on this check. This displays on the KDS (Kitchen Display System) for pending orders.

                The `tabName` value can contain up to 255 characters.
            paymentStatus:
              type: string
              description: |
                The payment status of this check.

                Valid values:

                * `OPEN` - There is an outstanding balance.

                * `PAID` - A credit card payment was applied, but the tip has not been adjusted.

                * `CLOSED`  - There is no remaining amount due on this check. For credit card payments, the payment has been adjusted to reflect the tip. Toast does not prevent a `CLOSED` check from transitioning back to `OPEN` or `PAID`.

                Response only.
              enum:
                - OPEN
                - PAID
                - CLOSED
            appliedDiscounts:
              type: array
              description: The discounts applied to this check. In a `POST` request, only one `appliedDiscount` is allowed per check.
              minItems: 0
              items:
                $ref: "#/components/schemas/AppliedDiscount"
            voided:
              type: boolean
              description: True if this check is voided. Response only.
            voidDate:
              type: string
              format: date-time
              description: The date when this check was voided. Response only.
            voidBusinessDate:
              type: integer
              description: The business date (yyyyMMdd) on which this check was voided. Response only.
            paidDate:
              type: string
              format: date-time
              description: The most recent date when this check received payment. If not specified when `POST`ing, it is set to the current system time.
            createdDevice:
              description: The Toast POS device that created the check. This value is `null` if the check was not created using a Toast POS device.
              $ref: "#/components/schemas/Device"
            lastModifiedDevice:
              description: |
                The Toast POS device that modified the check most recently. This value is `null` if the check was never modified using a Toast POS device.

                If the check is modified but the modification was not made using a Toast POS device, then this value does not change.
              $ref: "#/components/schemas/Device"
            duration:
              type: integer
              description: The number of seconds between creation and payment. Response only.
            openedBy:
              description: The restaurant employee, or server, who opened the check.
              $ref: "#/components/schemas/ExternalReference"
    Selection:
      type: object
      description: |
        A `Selection` object can represent either a primary item (for example,
        `Check.selections`) or a modifier (`Selection.modifiers`) selection.
        Quantity defaults to `1`.

        For a `POST` operation, all selections must have valid `item` and
        `itemGroup` fields. The `item` and `itemGroup` values can be `null` for
        `GET` requests. For example, they are `null` for gift cards and on special
        requests.

        To specify a modifier selection, add it to the `modifiers` list of
        another selection. Each modifier selection must have its `optionGroup` field
        set correctly, because a `MenuItem` can be included in multiple
        `MenuOptionGroups`, potentially with different prices or sizing.
      allOf:
        - $ref: "#/components/schemas/ExternalReference"
        - type: object
          required:
            - quantity
          properties:
            item:
              description: A reference to the selected menu item.
              $ref: "#/components/schemas/ConfigReference"
            itemGroup:
              description: A reference to the menu group from which the item was selected.
              $ref: "#/components/schemas/ConfigReference"
            optionGroup:
              description: A reference to the modifier group from which the menu item was selected. Only applies if this is a modifier selection.
              $ref: "#/components/schemas/ConfigReference"
            preModifier:
              description: A reference to the selected pre-modifier.
              $ref: "#/components/schemas/ConfigReference"
            quantity:
              type: number
              format: double
              description: Quantity ordered. For items sold by weight, a decimal number. For discrete items, a counting number.
            seatNumber:
              type: integer
              description: |
                Indicates which guest seat at a restaurant table ordered
                a menu item selection. Restaurant employees can choose the
                seat number when they add a menu item to a guest check.

                * A positive integer value indicates the seat number for
                  the menu item.

                * `0` - Indicates that the menu item is shared by
                  multiple guests.

                * `-1` - Indicates that the restaurant employee did not
                  select a seat for the menu item.

                Response only.
            unitOfMeasure:
              type: string
              description: |
                The unit of measure required for weighing the item.

                The default is `NONE`, which means that the item is not meant to be weighed.
              enum:
                - NONE
                - LB
                - OZ
                - KG
                - G
            selectionType:
              type: string
              description: |
                Specifies whether this selection is a special request or other off-menu sale.

                If `null` or `NONE`, describes a normal modifier or item selection.

                `TOAST_CARD_SELL` and `TOAST_CARD_RELOAD` are currently response-only.
              enum:
                - NONE
                - OPEN_ITEM
                - SPECIAL_REQUEST
                - PORTION
                - HOUSE_ACCOUNT_PAY_BALANCE
                - TOAST_CARD_SELL
                - TOAST_CARD_RELOAD
            salesCategory:
              description: A reference to the sales category of the item. Response only.
              $ref: "#/components/schemas/ConfigReference"
            appliedDiscounts:
              type: array
              description: The itemized discounts that are applied to this item. Response only.
              minItems: 0
              items:
                $ref: "#/components/schemas/AppliedDiscount"
            deferred:
              type: boolean
              description: Whether this selection is a deferred revenue transaction, such as a gift card sale.
            preDiscountPrice:
              type: number
              description: Gross sale price for this selection. Excludes tax. Response only.
              format: double
            price:
              type: number
              format: double
              description: Net price for this selection. The final price of the item after considering discounts (including discounts at the check level), quantity adjustments, and modifier prices at the time the item was selected for purchase. Response only.
            tax:
              type: number
              format: double
              description: The total tax amount for this selection. Response only.
            voided:
              type: boolean
              description: Set to `true` if this selection is voided. Response only.
            voidDate:
              type: string
              format: date-time
              description: The date on which this selection was voided. Response only.
            voidBusinessDate:
              type: integer
              description: The business date (yyyyMMdd) on which this selection was voided. Response only.
            voidReason:
              description: If `voided` is `true`, a reference to the void reason. Response only.
              $ref: "#/components/schemas/ExternalReference"
            refundDetails:
              description: |
                A `RefundDetails` object that
                contains information about refunded payment amounts for the item.
              $ref: "#/components/schemas/RefundDetails"
            displayName:
              type: string
              description: |
                The display name of the selection.

                Can be used to set a special request value.

                Otherwise, it is generated from this selection's item property.
            createdDate:
              type: string
              format: date-time
              description: The date on which this selection was created. If not specified, defaults to the current time.
            modifiedDate:
              type: string
              format: date-time
              description: The date on which this selection was last modified. If not specified, defaults to the current time.
            modifiers:
              type: array
              description: A list of modifiers that apply to this selection.
              items:
                $ref: "#/components/schemas/Selection"
            fulfillmentStatus:
              type: string
              default: NEW
              description: |
                Indicates the stage of the preparation workflow that the
                menu item selection is in.

                The `fulfillmentStatus` of a
                menu item selection changes as restaurant employees move
                the item through the functions of the Toast POS, for
                example order entry and the kitchen display system (KDS).
                Response only.

                Valid values:

                * `NEW` - The menu item selection was added to a
                  check but is not yet sent to the KDS for
                  preparation.

                * `HOLD` - A restaurant employee paused the menu
                  item selection so that it does not appear in the
                  KDS for preparation.

                * `SENT` - The menu item selection was fired and
                  appears in the KDS for preparation.

                * `READY` - Preparation is complete. The menu item
                  selection is fulfilled and no longer appears in
                  the KDS. If your restaurant does not use the Toast platform
                  KDS, then order items do not reach the `READY`
                  status.
              enum:
                - NEW
                - HOLD
                - SENT
                - READY
            taxInclusion:
              type: string
              description: |
                Indicates whether the menu item price includes one or more tax
                amounts. If the menu item is a modifier for another menu item
                selection, it always inherits the tax inclusion behavior of the menu
                item that it applies to.

                Valid values:
                * `INCLUDED` - The menu item price includes one or more tax amounts.
                * `NOT_INCLUDED` - The menu item price does not include any tax
                  amounts.
                * `INHERITED` - The menu item is a modifier for another menu item
                  selection in the check. The `taxInclusion` value of the parent menu
                  item selection applies to the modifier. If a menu item selection
                  *that is not a modifier* inherits tax inclusion behavior from a
                  menu or menu group, the `taxInclusion` value is either
                  `INCLUDED` or `NOT_INCLUDED`.
              enum:
                - INCLUDED
                - NOT_INCLUDED
                - INHERITED
            appliedTaxes:
              type: array
              description: An array of `AppliedTaxRate` objects that contain information about tax payments made for the selection. Response only.
              items:
                $ref: "#/components/schemas/AppliedTaxRate"
            diningOption:
              description: |
                A reference to the setting or method that a restaurant uses to fulfill orders. For example, dine-in, takeout, or delivery might be dining options.

                Restaurants configure the dining options that they fulfill orders in.

                Response only.
              $ref: "#/components/schemas/ExternalReference"
            openPriceAmount:
              description: |
                A non-negative currency amount that sets the price of a
                menu item that is configured to use the *Open Price*
                pricing strategy. If you do not supply an
                `openPriceAmount` value for an open price menu item, the
                orders API sets the price to 0.00.

                If a menu item is configured to use tax-inclusive
                pricing, the orders API calculates the base price and tax
                amount based on the open price that you specify. _The
                open-price amount includes both the base-price and
                inclusive tax amount._

                `POST` only. The `openPriceAmount` value is not
                present in orders API return data. It is used to
                populate `receiptLinePrice`.
              type: number
              format: double
            receiptLinePrice:
              type: number
              format: double
              description: |
                The price of the menu item selection without any quantity, taxes, 
                discounts, and modifier adjustments. If the menu item has taxes included, the `receiptLinePrice` value shows the original price, including taxes.

                For example, if the menu item selection is for two orders of fries, 
                `receiptLinePrice` is the price of one order of fries. If a menu item selection 
                is for three large drinks, receiptLinePrice is the price of one large drink.

                Populated based on the menu configuration, or using the value provided in 
                `externalPriceAmount` or `openPriceAmount`.
            optionGroupPricingMode:
              type: string
              description: Information about how the modifier group affects the pricing of its parent item.
              enum:
                - INCLUDED
                - FIXED_PRICE
                - ADJUSTS_PRICE
                - REPLACES_PRICE
                - LOCATION_SPECIFIC_PRICE
            externalPriceAmount:
              description: |
                The menu item price that was calculated by the
                marketplace facilitator organization that created the
                order.

                `POST` only. The orders API does not include the
                `externalPriceAmount` value in return data. It is
                used to populate `receiptLinePrice`.

                **Note**: you can only include this information if your
                Toast API client is associated with a designated
                marketplace facilitator organization. Most Toast API
                clients do not create marketplace facilitator orders.
              type: number
              format: double
            splitOrigin:
              description: |
                Reserved for future use.
              $ref: "#/components/schemas/ToastReference"
    Payment:
      type: object
      description: Defines a payment.
      allOf:
        - $ref: "#/components/schemas/ExternalReference"
        - type: object
          required:
            - type
            - amount
            - tipAmount
          properties:
            paidDate:
              description: The date on which the payment was made.
              type: string
              format: date-time
            paidBusinessDate:
              description: The business date (yyyyMMdd) on which this payment was first applied. Response only.
              type: integer
            type:
              type: string
              description: |
                The payment method.

                When `POST`ing, only `OTHER` and `CREDIT` payment types are supported. For cash payments, you create an external cash payment type in Other Payment Options.

                All other types are response only.

                Valid values:

                * `CASH` - The guest paid in cash.
                * `CREDIT` - The guest used a credit card.
                * `GIFTCARD` - The guest used a gift card.
                * `HOUSE_ACCOUNT` - The guest used funds from their house account.
                * `REWARDCARD` - The guest used the available balance on a rewards card.
                * `LEVELUP` - The guest used the LevelUp app.
                * `TOAST_SV` - The guest used their Toast Cash stored value.
                * `OTHER` - The payment type is a custom type configured by the restaurant.
                * `UNDETERMINED` - The payment type cannot be determined.
              enum:
                - CASH
                - CREDIT
                - GIFTCARD
                - HOUSE_ACCOUNT
                - REWARDCARD
                - LEVELUP
                - TOAST_SV
                - OTHER
                - UNDETERMINED
            cardEntryMode:
              type: string
              description: |
                Indicates how credit card data was obtained. Response only.

                Valid values:

                * `SWIPED` - The credit card was swiped through a card reader.
                * `KEYED` - The restaurant employee typed the card number into a device.
                * `ONLINE` - The credit card information was entered online.
                * `EMV_CHIP_SIGN` - The credit card was inserted into a chip reader.
                * `TOKENIZED` - The credit card number is tokenized, meaning that it is replaced by a series of randomly generated numbers. The authorizer is able to use the token to authorize the actual credit card.
                * `PRE_AUTHED` - The credit card was pre-authorized for an initial amount. An example of pre-authorization is swiping a credit card to start a bar tab. The final payment is authorized when the order is complete.
                * `SAVED_CARD` - The credit card information was retrieved from the guest's account.
                * `FUTURE_ORDER` - The credit card payment was included on a scheduled order.
                * `CONTACTLESS` - The guest used a contactless payment option to provide the credit card number.
                * `APPLE_PAY_CNP` - The guest used the Apple Pay app to make the payment.
                * `GOOGLE_PAY_CNP` - The guest used the Google Pay app to make the payment.
                * `INCREMENTAL_PRE_AUTHED` - An additional payment was added to a pre-authorized card. For example, a guest uses a credit card to open a bar tab. As they continue to order more drinks, the pre-authorized amount is updated. The final payment is authorized when the order is complete.
                * `PARTNER_ECOM_COF` - The restaurant has the credit card on file.
                * `CLICK_TO_PAY_CNP` - The guest used Click to Pay to make the payment.
              enum:
                - SWIPED
                - KEYED
                - ONLINE
                - EMV_CHIP_SIGN
                - TOKENIZED
                - PRE_AUTHED
                - SAVED_CARD
                - FUTURE_ORDER
                - CONTACTLESS
                - APPLE_PAY_CNP
                - GOOGLE_PAY_CNP
                - INCREMENTAL_PRE_AUTHED
                - PARTNER_ECOM_COF
                - CLICK_TO_PAY_CNP
            amount:
              type: number
              format: double
              description: The amount of this payment, excluding tips.
            tipAmount:
              type: number
              format: double
              description: The amount tipped on this payment.
            amountTendered:
              type: number
              format: double
              description: The amount tendered for this payment. The amount tendered does not include the tip.
            cardType:
              type: string
              description: The type of credit card that was used. Response only.
              enum:
                - VISA
                - MASTERCARD
                - AMEX
                - DISCOVER
                - JCB
                - DINERS
                - CIT
                - MAESTRO
                - LASER
                - SOLO
                - INTERAC
                - EFTPOS
                - UNKNOWN
            last4Digits:
              type: string
              description: The last 4 digits of the credit card that was used. Response only.
            server:
              description: The restaurant employee, or server, who is associated with the payment. Response only.
              $ref: "#/components/schemas/ExternalReference"
            refundStatus:
              type: string
              description: |
                Indicates whether the payment was refunded. Response only.
              enum:
                - NONE
                - PARTIAL
                - FULL
            paymentStatus:
              type: string
              description: |
                The status of this payment when the type is `CREDIT`. Response only.
              enum:
                - OPEN
                - PROCESSING
                - AUTHORIZED_AT_RISK
                - AUTHORIZED
                - ERROR
                - ERROR_NETWORK
                - DENIED
                - PROCESSING_VOID
                - VOIDED_AT_RISK
                - CANCELLED
                - CAPTURE_IN_PROGRESS
                - CAPTURED
                - VOIDED
            originalProcessingFee:
              type: number
              format: double
              description: The original processing fee for this payment. Populated after the payment is captured. Response only.
            cashDrawer:
              description: A reference to the `cashDrawer` used to receive this payment. Response only.
              $ref: "#/components/schemas/ExternalReference"
            refund:
              description: Response only.
              $ref: "#/components/schemas/Refund"
            voidInfo:
              description: If the payment was voided, this contains information about who did it and when. Response only.
              $ref: "#/components/schemas/VoidInformation"
            houseAccount:
              description: A reference to the house account, if any, that is associated with this payment. Response only.
              $ref: "#/components/schemas/ExternalReference"
            otherPayment:
              description: Required when the payment type is `OTHER`. A reference to an alternative payment method that was configured by the restaurant.
              $ref: "#/components/schemas/ExternalReference"
            createdDevice:
              description: The Toast POS device that created the payment. This value is `null` if the payment was not created using a Toast POS device.
              $ref: "#/components/schemas/Device"
            lastModifiedDevice:
              description: |
                The Toast POS device that modified the payment most recently. This value is `null` if the payment was never modified using a Toast POS device.

                If the payment is modified but the modification was not made using a Toast POS device, then this value does not change.
              $ref: "#/components/schemas/Device"
            mcaRepaymentAmount:
              description: |
                The total currency amount withheld as payments or repayments that
                apply to your business. For example, the `mcaRepaymentAmount` might include:

                * Toast Capital payments
                * Marketplace facilitator tax
                * Toast Delivery Services costs
                * Instant deposits

                The MCA repayment amount is set at the time the payment is
                captured, which is typically hours after the actual restaurant
                guest payment.

                Until the `mcaRepaymentAmount` is set, this value is `null`.

                The `mcaRepaymentAmount` _might_ be updated when the payment is
                settled, which is typically one or more days after the actual
                guest payment. Response only.

                You can use the following resources to find more specific
                information about the payment and repayment amounts that are
                included in `mcaRepaymentAmount`.

                * [Toast Capital payments](https://www.toasttab.com/restaurants/admin/capital/)
                * [Marketplace facilitator tax](https://www.toasttab.com/restaurants/admin/reports/home#sales-summary)
                * [Marketplace facilitator tax in API data](https://doc.toasttab.com/openapi/orders/tag/Data-definitions/schema/MarketplaceFacilitatorTaxInfo/)
                * [Instant deposits](https://www.toasttab.com/restaurants/admin/instant-deposit)
                * [Toast Delivery Services fees and tips](https://www.toasttab.com/restaurants/admin/reports/home#sales-summary)
                * [Toast Delivery Services fees and tips description](https://www.toasttab.com/restaurants/admin/reports/home#sales-summary)

                _Important_: Some of the resources listed here require access to
                Toast products as a restaurant employee or operator. If your
                organization provides an integration service you might not have
                access to the Toast products used by the restaurants you integrate
                with. Toast support cannot provide access to Toast product
                information. That information is only available to direct Toast
                product users.
              type: number
              format: double
            cardPaymentId:
              type: string
              description: |
                **Note:** this value is in limited release. Your orders API
                integration might not include the `cardPaymentId` value.

                A unique identifier for the credit card used for a
                `CREDIT` type payment. The identifier string is generated
                by the Toast platform and _does not include any
                information related to or associated with the actual
                credit card account._ The identifier is unique within
                your restaurant management group.

                The value is `null` for the following payment types:

                * Payment types other than `CREDIT`
                * Credit card payments entered using EMV (chip cards)
                * Credit card payments entered by keying in card numbers

                Response only.
            orderGuid:
              type: string
              description: The Toast platform identifier for the order that contains the payment. Response only.
            checkGuid:
              type: string
              description: The Toast platform identifier for the check that contains the payment. Response only.
            tenderTransactionGuid:
              type: string
              description: For internal use only.
    AppliedPackagingInfo:
      type: object
      description: |
        Information describing the guest's packaging preferences for this order, for example utensils, napkins, condiments.

        For more information, see <a href="https://doc.toasttab.com/doc/devguide/apiOrdersPackagingPreferences.html">Packaging preferences</a>
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            appliedPackagingItems:
              type: array
              minItems: 1
              items:
                $ref: "#/components/schemas/AppliedPackagingItem"
    AppliedPackagingItem:
      type: object
      description: |
        Indicates the guest preference for an individual packaging item in this order.
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          required:
            - itemConfigId
            - inclusion
          properties:
            itemConfigId:
              type: string
              description: |
                The identifier GUID of the packaging preference option.
            inclusion:
              type: string
              description: |
                The packaging preference choice that the guest selected in your ordering interface.
              enum:
                - "YES"
                - "NO"
            itemTypes:
              type: array
              items:
                type: string
              description: |
                The packaging item types relevant for this packaging item as configured by the restaurant in Toast Web. Response only.
            guestDisplayName:
              type: string
              description: |
                The guest-facing name, configured by the restaurant in Toast Web, for this packaging item. Response only.
    AppliedDiscountReason:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The name of the reason for the applied discount.
        description:
          type: string
          description: An optional description for the reason for the applied discount.
        comment:
          type: string
          description: An optional comment on the reason for the applied discount.
        discountReason:
          description: A ToastReference object that contains the GUID for the discount reason configured for the discount.
          $ref: "#/components/schemas/ToastReference"
    AppliedDiscountTrigger:
      type: object
      description: The Selection that triggered the application of this discount
      properties:
        selection:
          $ref: "#/components/schemas/ExternalReference"
        quantity:
          type: number
          format: double
          description: The amount of the selection used to trigger the applied discount.
    AppliedLoyaltyInfo:
      type: object
      description: Information about the customer loyalty program account associated with a check.
      required:
        - loyaltyIdentifier
        - vendor
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            loyaltyIdentifier:
              type: string
              description: An identifier for the loyalty program account. For `POST` orders, this identifier is transmitted to the loyalty program service provider to associate the check with the loyalty account.
            maskedLoyaltyIdentifier:
              type: string
              description: |
                A representation of the identifier of the loyalty program
                account that can be displayed securely. For example:
                `************1234`. The Toast POS displays this string to
                restaurant employees and guests.

                You can optionally include this
                value when you `POST` an order. It is
                available in response data when you `GET` the order.

                If you do not provide a `maskedLoyaltyIdentifier` when you
                `POST` an order, this value is `null` in response data.

                The Toast POS app displays a masked representation of the
                `loyaltyIdentifier`. All characters except the last four
                are hidden.
            vendor:
              type: string
              description: The specific loyalty program service provider that supports the loyalty account.
              enum:
                - TOAST
                - PUNCHH
                - PUNCHH2
                - PAYTRONIX
                - APPFRONT
                - INTEGRATION
            accrualFamilyGuid:
              type: string
              description: |
                Response only. An internal Toast platform identifier for loyalty
                program transactions.

                This is not returned from the initial
                `POST` order request and is available at a later time.
            accrualText:
              type: string
              description: |
                Response only. A description of the loyalty program transaction
                to print on the customer's receipt. For example,
                "Earned 27 points."

                The maximum length of the description string
                is 255 characters.

                This is not returned from the initial
                `POST` order request and is available at a later time.
    AppliedServiceCharge:
      type: object
      description: |
        A service charge that is added to a check. A service charge can represent an upcharge such as a gratuity or a delivery fee.

        Whether the upcharge is taxable is defined in the restaurant-configured `serviceCharge`.

        The fields on the `AppliedServiceCharge` are calculated based on the referenced `ServiceCharge` configuration.
      allOf:
        - $ref: "#/components/schemas/ExternalReference"
        - type: object
          required:
            - serviceCharge
          properties:
            chargeAmount:
              type: number
              format: double
              description: The final applied amount excluding tax. Required if `chargeType` is `OPEN`.
            serviceCharge:
              description: A reference to the restaurant-configured service charge. If a service charge is taxable, the tax amount is applied to the check.
              $ref: "#/components/schemas/ExternalReference"
            chargeType:
              description: |
                The type of service charge. Response only.

                Valid values:

                * `FIXED` - The service charge is for a specific currency amount.

                * `PERCENT` - The service charge is for a percentage of the check amount.

                * `OPEN` - The service charge is not configured with an amount. The amount is specified by the restaurant employee.
              type: string
              enum:
                - FIXED
                - PERCENT
                - OPEN
            name:
              description: The configured human readable label for the service charge. Response only.
              type: string
            delivery:
              description: Whether this service charge is a delivery charge. Response only.
              type: boolean
            takeout:
              description: Whether this service charge is a takeout charge. Response only.
              type: boolean
            dineIn:
              description: Whether this service charge is a dine-in charge. Response only.
              type: boolean
            gratuity:
              description: Whether this service charge is a gratuity. Can be used to derive required tip amount on the check. Response only.
              type: boolean
            taxable:
              description: Whether this service charge is taxable. Response only.
              type: boolean
            appliedTaxes:
              type: array
              description: Taxes applied to the service charge.
              items:
                $ref: "#/components/schemas/AppliedTaxRate"
            serviceChargeCalculation:
              type: string
              description: |
                Defines whether a `PERCENT` service charge is applied before (`PRE_DISCOUNT`) or after (`POST_DISCOUNT`) discounts.

                This field is `null` for `FIXED` and `OPEN` service charges.
              enum:
                - PRE_DISCOUNT
                - POST_DISCOUNT
            refundDetails:
              description: |
                A `RefundDetails` object that
                contains information about refunded payment amounts for the item.
              $ref: "#/components/schemas/RefundDetails"
            serviceChargeCategory:
              description: |
                The type of service charge. Default is `SERVICE_CHARGE`. Response only.

                Valid values:

                * `SERVICE_CHARGE` - The default type for a service charge.

                * `CREDIT_CARD_SURCHARGE` - A fee assessed _only_ on payment transactions that use a credit card.

                * `FUNDRAISING_CAMPAIGN` - Service charge associated with fundraising.
              type: string
              enum:
                - SERVICE_CHARGE
                - CREDIT_CARD_SURCHARGE
                - FUNDRAISING_CAMPAIGN
            paymentGuid:
              description: The Toast platform unique identifier for the payment the fee is linked to. The `paymentGuid` value is always `null` unless the `serviceChargeCategory` object value is `CREDIT_CARD_SURCHARGE`. Response only.
              type: string
    AppliedDiscount:
      type: object
      description: |
        A discount applied to a check or item.
      allOf:
        - $ref: "#/components/schemas/ExternalReference"
        - type: object
          properties:
            name:
              type: string
              description: The name of the applied discount.
            discountAmount:
              type: number
              format: double
              description: The discount amount. This amount is subtracted from the check or item.
            discount:
              description: A GUID reference to the discount configured for the restaurant.
              $ref: "#/components/schemas/ToastReference"
            approver:
              description: The user who approved the discount. Response only.
              $ref: "#/components/schemas/ExternalReference"
            discountType:
              type: string
              description: |
                The behavior of this discount.
              enum:
                - BOGO
                - PERCENT
                - FIXED
                - OPEN_PERCENT
                - OPEN_FIXED
                - FIXED_TOTAL
            discountPercent:
              type: number
              format: double
              description: The percent value (0-100) of the applied discount when the `discountType` is `PERCENT` or `OPEN_PERCENT`.
            nonTaxDiscountAmount:
              type: number
              format: double
              description: The discount amount, excluding the tax discount amount. Response only.
            triggers:
              type: array
              description: The menu item selections in the check that triggered this discount to be applied. Response only.
              items:
                $ref: "#/components/schemas/AppliedDiscountTrigger"
            processingState:
              type: string
              description: |
                The validation state of a loyalty program discount. Response only.

                Valid values:

                * `PENDING_APPLIED` - The loyalty program discount is applied to the check but the loyalty program service provider has not validated it. The discount will appear on guest receipts.

                * `APPLIED` - The loyalty program discount has been validated by the loyalty program service provider and will appear on guest receipts.

                * `PENDING_VOID` - The loyalty program service provider rejected the discount. The discount is pending removal from the check.

                * `VOID` - The loyalty program discount has been removed from the check because the loyalty program service provider rejected it.
              enum:
                - PENDING_APPLIED
                - APPLIED
                - PENDING_VOID
                - VOID
            appliedDiscountReason:
              description: Information about the optional reason for the applied discount. Response only.
              $ref: "#/components/schemas/AppliedDiscountReason"
            loyaltyDetails:
              description: Information about the customer loyalty program discount that is applied to a check. The loyalty program account is identified in the `AppliedLoyaltyInfo` value for the check.
              $ref: "#/components/schemas/LoyaltyDetails"
            comboItems:
              type: array
              description: The menu item selections that are discounted as part of a combo discount. Response only.
              items:
                $ref: "#/components/schemas/ExternalReference"
            appliedPromoCode:
              type: string
              description: The promo code that was applied to get this discount. Response only.
    Customer:
      type: object
      allOf:
        - type: object
          required:
            - guid
          properties:
            guid:
              type: string
              description: The GUID of the customer.
            firstName:
              type: string
              description: |
                The first name, or given name, of the guest.
            lastName:
              type: string
              description: |
                The last name, or surname, of the guest.
            phone:
              type: string
              description: |
                The telephone number of the guest.
            phoneCountryCode:
              type: string
              description: |
                The international phone country code for the telephone number of the guest.
            email:
              type: string
              description: |
                The email address corresponding to the guest who placed the order.
    CurbsidePickupInfo:
      type: object
      description: |
        Information that the restaurant can use to identify a guest when they arrive
        outside the restaurant to pick up their order. `transportDescription` is a required field.
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            transportColor:
              description: |
                The color of the guest's vehicle if they will arrive at the restaurant in a vehicle to pick up their order.
              type: string
              maxLength: 20
            transportDescription:
              description: |
                Information about how the guest will arrive at the restaurant to pick up their order.

                For example, the make and model of the vehicle the guest will arrive in.
              type: string
              maxLength: 100
    DeliveryInfo:
      type: object
      description: Information related to delivery orders. Required if the dining option behavior is `DELIVERY`.
      required:
        - address1
        - city
        - state
        - zipCode
      properties:
        address1:
          type: string
          description: |
            The first line of the street address of the delivery destination.
        address2:
          type: string
          description: |
            The second line of the street address of the delivery destination.
        city:
          type: string
          description: |
            The name of the city or town of the delivery destination.
        state:
          type: string
          format: ISO 3166-2
          description: |
            The postal abbreviation of the state or province of the
            delivery destination.
        zipCode:
          type: string
          description: |
            The postal or zip code of the delivery destination.
        administrativeArea:
          type: string
          description: |
            The state, province, or other geographic division that is larger than a city or town of the delivery destination.
        country:
          type: string
          description: |
            The two-character ISO-3166-2 country code of the delivery destination.
        latitude:
          type: number
          format: double
          description: |
            The north/south geographic coordinate of the delivery
            destination, in decimal format.
        longitude:
          type: number
          format: double
          description: |
            The east/west geographic coordinate of the delivery
            destination, in decimal format.
        notes:
          description: |
            Additional instructions or information about the delivery.
          type: string
        deliveredDate:
          type: string
          format: date-time
          description: |
            The date and time that the delivery employee indicated in the Toast POS app that
            the order was delivered. Response only.
        dispatchedDate:
          type: string
          format: date-time
          description: |
            The date and time that the restaurant indicated in the Toast POS app that the
            order was available for delivery and assigned to a delivery
            employee.
        deliveryEmployee:
          description: |
            The Toast GUID of the employee who delivers the order.
          $ref: "#/components/schemas/ExternalReference"
        deliveryState:
          description: |
            An internal representation of the state of a delivery order.
          type: string
          enum:
            - PENDING
            - IN_PROGRESS
            - PICKED_UP
            - DELIVERED
    DeliveryServiceInfo:
      type: object
      description: |
        Reserved for future use.
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            providerId:
              description: |
                Reserved for future use.
              type: string
              maxLength: 255
            providerName:
              description: |
                Reserved for future use.
              type: string
              maxLength: 36
            driverName:
              description: |
                Reserved for future use.
              type: string
              maxLength: 255
            driverPhoneNumber:
              description: |
                Reserved for future use.
              type: string
              maxLength: 30
            providerInfo:
              description: |
                Reserved for future use.
              type: string
              format: byte
            originalQuotedDeliveryDate:
              description: |
                Reserved for future use.
              type: string
              format: ISO-8601
    Device:
      type: object
      description: |
        The *Device ID* value that the Toast platform assigns to a specific Toast POS device.

        The `id` value is a unique identifier for a device.

        To find the ID for a Toast POS device, from the overflow  menu (⋮) select *Device Status* and then select the *Device* tab.
      properties:
        id:
          type: string
          description: The physical id of the device
    Employee:
      type: object
      description: A restaurant employee
      allOf:
        - $ref: "#/components/schemas/ExternalReference"
        - type: object
          properties:
            createdDate:
              type: string
              format: date-time
              description: |
                Date created, in UTC format (read-only).
            modifiedDate:
              type: string
              format: date-time
              description: |
                Date modified, in UTC format (read-only).
            firstName:
              type: string
              description: |
                Optional, first name of the employee.
            chosenName:
              type: string
              description: |
                Optional, chosen name of the employee.
            lastName:
              type: string
              description: |
                Optional, last name of the employee.
            email:
              type: string
              description: |
                Employee's email address.
            phoneNumber:
              type: string
              description: |
                Employee's phone number
            passcode:
              type: string
              description: |
                An optional numeric security code that a new employee can 
                use to begin a session in a Toast POS device.
            externalEmployeeId:
              type: string
              description: |
                Optional, employee's external ID in the Toast platform.
            deleted:
              type: boolean
              description: |
                If the employee is deleted in the Toast platform.
            jobReferences:
              type: array
              description: |
                An array of external references to jobs assigned to this 
                employee.
              minItems: 0
              items:
                $ref: "#/components/schemas/ExternalReference"
            wageOverrides:
              type: array
              description: |
                An optional array of per job wage overrides.
              minItems: 0
              items:
                $ref: "#/components/schemas/JobWageOverride"
    Job:
      type: object
      description: A restaurant job.
      allOf:
        - $ref: "#/components/schemas/ExternalReference"
        - type: object
          properties:
            createdDate:
              type: string
              format: date-time
              description: |
                Date created, in UTC format (read-only).
            modifiedDate:
              type: string
              format: date-time
              description: |
                Date modified, in UTC format (read-only).
            title:
              type: string
              description: |
                Title of the job.
            deleted:
              type: boolean
              description: |
                If the job is deleted in the Toast platform.
            wageFrequency:
              type: string
              description: |
                An enumerated type specifying how to interpret the 
                default wage for this job.
              enum:
                - HOURLY
                - SALARY
            defaultWage:
              type: number
              format: double
              description: |
                The default wage of the job.
            tipped:
              type: boolean
              description: |
                Indicates whether the job receives gratuities (tips).
            code:
              type: string
              description: |
                A reference identifier for the job.
    JobWageOverride:
      type: object
      description: |
        The overriding job wage, for an employee that has a wage that 
        differs from the job's default wage.
      required:
        - wage
        - jobReference
      properties:
        wage:
          type: number
          format: double
          description: |
            Required currency value of the employee's overriding job wage.
        jobReference:
          description: |
            Required external reference to the job to which this wage 
            applies overridden
          $ref: "#/components/schemas/ExternalReference"
    Shift:
      type: object
      description: |
        A scheduled shift in the Toast platform used to enforce employee 
        clock-in and clock outs.
      allOf:
        - $ref: "#/components/schemas/ExternalReference"
        - type: object
          properties:
            createdDate:
              type: string
              format: date-time
              description: |
                Date created, in UTC format (read-only).
            modifiedDate:
              type: string
              format: date-time
              description: |
                Date modified, in UTC format (read-only).
            deleted:
              type: boolean
              description: |
                If the shift is deleted in the Toast platform.
            jobReference:
              description: |
                External reference to the job assigned to this shift.
              $ref: "#/components/schemas/ExternalReference"
            employeeReference:
              description: |
                External reference to the employee assigned to this shift.
              $ref: "#/components/schemas/ExternalReference"
            inDate:
              type: string
              format: date-time
              description: |
                Timestamp of the beginning of the shift. This is when the 
                employee can clock in. Expressed in the UTC time zone.
            outDate:
              type: string
              format: date-time
              description: |
                Timestamp of the end of the shift. This is when the 
                employee can clock out. Expressed in the UTC time zone.
    TimeEntry:
      type: object
      description: |
        A `TimeEntry` captures the actual time an employee worked or took 
        a break.
      allOf:
        - $ref: "#/components/schemas/ExternalReference"
        - type: object
          properties:
            createdDate:
              type: string
              format: date-time
              description: |
                Date created, in UTC format (read-only).
            modifiedDate:
              type: string
              format: date-time
              description: |
                Date modified, in UTC format (read-only).
            deleted:
              type: boolean
              description: |
                If the time entry is deleted in the Toast platform.
            jobReference:
              description: |
                Optional, external reference to the job the employee 
                assumed when clocking into the Toast platform.
              $ref: "#/components/schemas/ExternalReference"
            employeeReference:
              description: |
                External reference to the employee that created this time 
                entry.
              $ref: "#/components/schemas/ExternalReference"
            shiftReference:
              description: |
                Optional, external reference to the scheduled shift 
                associated with this time entry.
              $ref: "#/components/schemas/ExternalReference"
            inDate:
              type: string
              format: date-time
              description: |
                The date and time that an employee clocked in to a work
                shift.
            outDate:
              type: string
              format: date-time
              description: |
                The date and time that an employee closed a work shift.
            autoClockedOut:
              type: boolean
              description: |
                Indicates whether the Toast platform automatically clocked the
                employee out of their shift at the end of the restaurant business
                day.
            businessDate:
              type: string
              description: |
                The business date of `inDate`, in the format of 
                "yyyymmdd".
            regularHours:
              type: number
              format: double
              description: |
                Regular hours worked by the employee for this time entry, 
                excluding breaks.
            overtimeHours:
              type: number
              format: double
              description: |
                Any overtime hours taken by this employee during this 
                time entry.
            hourlyWage:
              type: number
              format: double
              description: |
                Optional, historical `hourlyWage`; that is, the wage in 
                effect when the time entry was made.
            breaks:
              type: array
              description: |
                An optional array of time entry breaks, each break 
                defining a clock-in date, clock-out date, and whether or 
                not the break was paid.
              minItems: 0
              items:
                $ref: "#/components/schemas/TimeEntryBreak"
            declaredCashTips:
              type: number
              format: double
              description: |
                The currency amount of tips paid in cash during the time
                entry.
            nonCashTips:
              type: number
              format: double
              description: |
                The currency amount of tips paid using non-cash tender
                during the time entry.
    TimeEntryBreak:
      type: object
      description: |
        Information about a period of time that an employee is not
        working during a shift.
      properties:
        guid:
          description: |
            The GUID maintained by the Toast platform.
          type: string
        breakType:
          $ref: "#/components/schemas/ToastReference"
        paid:
          type: boolean
          description: |
            Indicates whether the employee was paid for the break.
        inDate:
          type: string
          format: date-time
          description: |
            The date and time that the employee started the break period,
            in UTC.
        outDate:
          type: string
          format: date-time
          description: |
            The date and time that the employee ended the break period
            and returned to work, in UTC.
        missed:
          type: boolean
          description: |
            Indicates whether the break was a missed break.
    ExternalReference:
      type: object
      description: A wrapper object with fields that allow reference to a Toast platform entity by Toast GUID or a partner's identifier.
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            externalId:
              description: External identifier string that is prefixed by the naming authority.
              type: string
    ToastReference:
      type: object
      description: A wrapper object with fields that allow reference to a Toast entity by Toast GUID.
      required:
        - guid
        - entityType
      properties:
        guid:
          description: The GUID maintained by the Toast platform.
          type: string
        entityType:
          description: The type of object this is. Response only.
          type: string
    ConfigReference:
      type: object
      description: |
        A wrapper object containing identifier values for Toast platform entities.
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            multiLocationId:
              description: |
                A consistent identifier for Toast platform entities.
              type: string
            externalId:
              description: |
                An external identifier that is prefixed by a naming
                authority.
              type: string
    ApplicableDiscountsRequest:
      type: object
      description: |
        A wrapper object that contains an `Order` object and an optional
        promotional code.
      required:
        - order
      properties:
        order:
          $ref: "#/components/schemas/Order"
          description: |
            An `Order` object that
            contains information about the order that you want to get discounts
            for.
        promoCode:
          description: |
            An optional promotional code.
          type: string
    ApplicableDiscount:
      type: object
      description: |
        A wrapper object that contains information about a discount that you
        can apply to an order, and which checks or menu item selections
        you can apply it to.
      required:
        - discount
      properties:
        discount:
          description: |
            A `ToastReference` object containing the identifiers of the discount.
            Response only.
          $ref: "#/components/schemas/ToastReference"
        applicableChecks:
          description: |
            If the discount is applicable to a check, this value holds an
            array of `ExternalReference` objects containing the identifiers of the checks.
          type: array
          items:
            $ref: "#/components/schemas/ExternalReference"
        applicableSelections:
          description: |
            If the discount is applicable to a menu item selection, this
            value holds an array of `ExternalReference` objects containing
            the identifiers of the menu items.
          type: array
          items:
            $ref: "#/components/schemas/ExternalReference"
    UpdatePaymentRequest:
      type: object
      description: |
        A wrapper object containing payment fields that you can update.
      properties:
        tipAmount:
          description: |
            The amount tipped on a payment.
          type: number
          format: double
          example: 3.25

    Location:
      type: object
      description: Information about the physical location of a restaurant.
      properties:
        address1:
          type: string
          description: The first line of the street address of the
            restaurant.
        address2:
          type: string
          description: The second line of the street address of the
            restaurant.
        city:
          type: string
          description: The city or town of the restaurant.
        stateCode:
          type: string
          description: |
            Deprecated. Get the state or province of a restaurant in the
            `administrativeArea` value.

            The abbreviation of the state or province of the restaurant.
        administrativeArea:
          type: string
          description: |
            The name of the geographical division (for example, state, province,
            or county) that the restaurant is located in.
        zipCode:
          type: string
          description: The ZIP or postal code of the restaurant.
        country:
          type: string
          description: The nation of the restaurant.
        phone:
          type: string
        phoneCountryCode:
          type: string
          description: |
            A numeric code corresponding to one or more countries,
            used as a telephone number prefix when making 
            international telephone calls.
        latitude:
          type: number
          format: double
          description: The north/south geographic coordinate of the
            restaurant, in decimal degrees.
        longitude:
          type: number
          format: double
          description: The east/west geographic coordinate of the
            restaurant, in decimal degrees.

    LoyaltyDetails:
      type: object
      description: Information about the loyalty program discount that is applied to a check. The loyalty program account is identified in the `AppliedLoyaltyInfo` value for the check.
      required:
        - vendor
        - referenceId
      properties:
        vendor:
          type: string
          description: The specific loyalty program service provider that supports the loyalty account.
          enum:
            - TOAST
            - PUNCHH
            - PUNCHH2
            - PAYTRONIX
            - APPFRONT
            - INTEGRATION
        referenceId:
          type: string
          description: |
            The identifier of the loyalty program discount that
            is recognized by the loyalty program service provider.

            The Toast platform transmits the discount identifier to the service
            provider to determine the validity and amount of the discount.

    URLs:
      type: object
      description: Web addresses for the restaurant.
      properties:
        website:
          type: string
          description: The primary website for the restaurant.
        facebook:
          type: string
          description: A Facebook™ page for the restaurant.
        twitter:
          type: string
          description: A Twitter™ handle for the restaurant.
        orderOnline:
          type: string
          description: A URL for the online ordering site for the
            restaurant.
        purchaseGiftCard:
          type: string
          description: A URL for the gift card purchasing site for the
            restaurant.
        checkGiftCard:
          type: string
          description: A URL for a site at which guests can find balances
            and other information about gift cards.

    Image:
      type: string
      description: Information about an image.

    Hours:
      type: object
      description: |
        The period of time that the restaurant offers a service. For
        example, a service might be named "lunch" and it might be offered
        between `10:00:00.000` and `16:00:00.000`.
      properties:
        startTime:
          type: string
          description: The time of day that the service begins.
        endTime:
          type: string
          description: The time of day that the service ends.

    Service:
      type: object
      description: |
        A time-based division of the operation of the restaurant. For
        example, a service might be named `lunch` and it might be
        available between specific hours during the day.
      properties:
        name:
          type: string
        hours:
          $ref: "#/components/schemas/Hours"
        overnight:
          type: boolean
          description: |
            Indicates whether any portion of the period of time that a
            service is available occurs after 00:00 (midnight) and before
            the business day cutoff time for the restaurant which is 
            available in the `closeoutHour` property. An
            overnight shift spans two calendar dates but occurs during
            one business day.

    DaySchedule:
      type: object
      description: |
        Information about the services and hours that are scheduled for a
        restaurant during a type of day. For example, a restaurant might
        have different services available on a type of day named
        `weekday` than it does on a type of day named `weekend`.
      properties:
        scheduleName:
          type: string
          description: The name of the type of day. For example, `weekday`.
        services:
          type: array
          items:
            $ref: "#/components/schemas/Service"
          description: |
            An array of `Service` objects that are available during the
            type of day.
        openTime:
          type: string
          description: |
            The time of day that the first service for the type of day
            begins. For example, the first service might begin at
            `06:00:00.000`.
        closeTime:
          type: string
          description: |
            The time of day that the last service for the type of day
            ends. For example, the last service might end at
            `02:00:00.000`.

    WeekSchedule:
      type: object
      description: |
        The day schedule used for each day of the week. A day schedule is 
        the set of services (for example, "lunch") that a restaurant 
        offers and the hours that it offers each one. If a day of the 
        week value in this object is `null`, the restaurant is closed on 
        that day. Values for each day of the week are identifiers for day 
        schedules in the map of `DaySchedule` objects in the 
        `daySchedules` value of the `Schedules` object.
      properties:
        monday:
          type: string
          description: |
            A key identifier for the `DaySchedule` object
            that represents the services and hours for the restaurant on
            this day of the week.
        tuesday:
          type: string
          description: |
            A key identifier for the `DaySchedule` object
            that represents the services and hours for the restaurant on
            this day of the week.
        wednesday:
          type: string
          description: |
            A key identifier for the `DaySchedule` object
            that represents the services and hours for the restaurant on
            this day of the week.
        thursday:
          type: string
          description: |
            A key identifier for the `DaySchedule` object
            that represents the services and hours for the restaurant on
            this day of the week.
        friday:
          type: string
          description: |
            A key identifier for the `DaySchedule` object
            that represents the services and hours for the restaurant on
            this day of the week.
        saturday:
          type: string
          description: |
            A key identifier for the `DaySchedule` object
            that represents the services and hours for the restaurant on
            this day of the week.
        sunday:
          type: string
          description: |
            A key identifier for the `DaySchedule` object
            that represents the services and hours for the restaurant on
            this day of the week.

    Schedules:
      type: object
      description: |
        Information about the services and hours that are scheduled for a
        restaurant during different types of days. For example, a restaurant
        might have different services available on weekdays than it does on
        weekends.
      properties:
        weekSchedule:
          $ref: "#/components/schemas/WeekSchedule"
        daySchedules:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/DaySchedule"
          description: |
            A map of `DaySchedule` objects that define the services and
            hours for different types of days. Each `DaySchedule` object
            is presented as a key/value pair. A pair's key matches the
            `scheduleName` of the object contained in the pair's value.

    Delivery:
      type: object
      description: |
        Information about the delivery configuration for the restaurant.
      properties:
        enabled:
          type: boolean
          description: |
            Indicates whether the restaurant has enabled the Toast delivery
            module. This value is `true` if the module has ever been
            enabled. The value _does not_ indicate that a restaurant is
            accepting delivery orders or that the restaurant is using the
            Toast delivery feature.
        radius:
          type: number
          format: double
          description: |
            The radius, in miles, of the delivery area for the restaurant.
        coordinates:
          type: string
          description: |
            The delivery area coordinates for the restaurant, encoded as a
            polyline using the Google polyline algorithm
            (https://github.com/mapbox/polyline). The delivery area
            coordinates are a JSON array of decimal degree latitude and
            longitude pairs. For example,
            `[[42.36083,-71.14798],[42.34028,-71.15673],[42.3272,-71.14386]]`.

    OnlineOrdering:
      type: object
      description: |
        Information about the web-based ordering configuration for the
        restaurant.
      properties:
        enabled:
          type: boolean
          description: |
            Indicates whether the restaurant has enabled the Toast online 
            ordering module. This value is `true` if the module has ever 
            been enabled. The value _does not_ indicate that a restaurant 
            is accepting online orders or that the restaurant is using 
            the Toast online ordering feature.
        scheduling:
          type: boolean
          description: |
            Indicates whether the online ordering function for the
            restaurant allows guests to place orders that will be
            fulfilled in the future. If this value is `false`, orders
            will be fulfilled as soon as possible.
        specialRequests:
          type: boolean
          description: |
            Indicates whether the online ordering function for the
            restaurant allows guests to include written notes with
            additional instructions for their orders.
        specialRequestsMessage:
          type: string
          description: |
            A written message that is shown to guests when they
            include additional instructions with an order. For example,
            the message might be "no substitutions."
        paymentOptions:
          $ref: "#/components/schemas/PaymentOptions"
          description: |
            Information about the forms of payment that the restaurant
            accepts for online orders.

    PaymentOptions:
      type: object
      description: |
        Information about the forms of payment that the restaurant will
        accept for orders.
      properties:
        delivery:
          $ref: "#/components/schemas/DeliveryPaymentOptions"
        takeout:
          $ref: "#/components/schemas/TakeoutPaymentOptions"
        ccTip:
          type: boolean
          description: enables credit card tips

    DeliveryPaymentOptions:
      type: object
      description: |
        Information about the forms of payment that the restaurant will
        accept for delivery orders.
      properties:
        cash:
          type: boolean
          description: |
            Indicates whether the restaurant accepts cash payment for
            delivery orders that are placed online.
        ccSameDay:
          type: boolean
          description: |
            Indicates whether the restaurant accepts online credit card
            payment for delivery orders that are delivered on the same
            day.
        ccFuture:
          type: boolean
          description: |
            Indicates whether the restaurant accepts online credit card
            payment for delivery orders that are to be delivered on a day
            after the guest places the order.

    TakeoutPaymentOptions:
      type: object
      description: |
        Information about the forms of payment that the restaurant will
        accept for orders that a guest picks up in person.
      properties:
        cash:
          type: boolean
          description: |
            Indicates whether the restaurant accepts cash payment for
            takeout orders that are placed online.
        ccSameDay:
          type: boolean
          description: |
            Indicates whether the restaurant accepts online credit card
            payment for takeout orders that the guest will pick up on
            the same day.
        ccFuture:
          type: boolean
          description: |
            Indicates whether the restaurant accepts online credit card
            payment for takeout orders that the guest will pick up on
            a day after the guest places the order.
        ccInStore:
          type: boolean
          description: |
            Indicates whether the restaurant accepts credit card payment
            at the time the guest picks up a takeout order.

    PrepTimes:
      type: object
      description: |
        Information about the scheduled availability of the dining
        options that are provided by the restaurant.
      properties:
        deliveryPrepTime:
          type: integer
          format: int32
          description: |
            The amount of time, in minutes, that it takes to prepare an
            online delivery order.
        deliveryTimeAfterOpen:
          type: integer
          format: int32
          description: |
            The amount of time, in minutes, that it takes for delivery
            service to become available after the restaurant opens.
        deliveryTimeBeforeClose:
          type: integer
          format: int32
          description: |
            The amount of time, in minutes, before the restaurant closing
            time that delivery service becomes unavailable.
        takeoutPrepTime:
          type: integer
          format: int32
          description: |
            The amount of time, in minutes, that it takes to prepare an
            online takeout order.
        takeoutTimeAfterOpen:
          type: integer
          format: int32
          description: |
            The amount of time, in minutes, that it takes for takeout
            service to become available after the restaurant opens.
        takeoutTimeBeforeClose:
          type: integer
          format: int32
          description: |
            The amount of time, in minutes, before the restaurant closing
            time that takeout service becomes unavailable.
        takeoutThrottlingTime:
          type: integer
          description: |
            The amount of time, in minutes, that an online takeout order
            is delayed before the Toast POS fires it in the kitchen.
        deliveryThrottlingTime:
          type: integer
          description: |
            The amount of time, in minutes, that an online delivery order
            is delayed before the Toast POS fires it in the kitchen.

    RestaurantInfo:
      type: object
      description: |
        Information about the configuration of a restaurant in the Toast
        POS.
      properties:
        guid:
          type: string
        general:
          $ref: "#/components/schemas/General"
        urls:
          $ref: "#/components/schemas/URLs"
        location:
          $ref: "#/components/schemas/Location"
        schedules:
          $ref: "#/components/schemas/Schedules"
        delivery:
          $ref: "#/components/schemas/Delivery"
        onlineOrdering:
          $ref: "#/components/schemas/OnlineOrdering"
        prepTimes:
          $ref: "#/components/schemas/PrepTimes"

    RestaurantBasic:
      type: object
      description: |
        The Toast POS GUID for a restaurant
      properties:
        guid:
          type: string
          description: |
            The unique identifier that the Toast POS assigns to a
            restaurant.

    AlternatePaymentType:
      type: object
      allOf:
        - $ref: "#/components/schemas/ExternalReference"
        - type: object
          properties:
            name:
              type: string
              description: The name of the alternate payment type.

    BreakType:
      type: object
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            name:
              type: string
              description: |
                The name of the work break type, as recognized by
                restaurant employees.
            active:
              type: boolean
              description: |
                Indicates whether the break is available and can be taken
                by restaurant employees.
            paid:
              type: boolean
              description: Indicates whether the break is paid.
            duration:
              type: integer
              description: The duration of the break in minutes.
            enforceMinimumTime:
              type: boolean
              description: |
                Indicates whether the duration is enforced as the minimum
                time for the break.
            trackMissedBreaks:
              type: boolean
              description: |
                True if breaks that are not taken within the specified break
                interval should be generated in Toast.
            breakIntervalHrs:
              type: integer
              description: |
                The number of hours between break intervals. Break intervals
                are specified in hours and minutes. If missed breaks are not
                tracked, this value may be null.
            breakIntervalMins:
              type: integer
              description: |
                The number of minutes between break intervals. Break intervals
                are specified in hours and minutes. If missed breaks are not
                tracked, this value may be null.
            trackBreakAcknowledgement:
              type: boolean
              description: |
                Indicates whether break acknowledgements are collected for
                this type of break. Break acknowledgements will not be
                collected if `trackMissedBreaks` is false.

    CashDrawer:
      type: object
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            printer:
              $ref: "#/components/schemas/ToastReference"

    DiningOption:
      type: object
      allOf:
        - $ref: "#/components/schemas/ExternalReference"
        - type: object
          properties:
            name:
              type: string
              description: The name of the dining option.
            behavior:
              type: string
              description: |
                The behavior of the dining option. `TAKE_OUT` and
                `DELIVERY` require a `customer` to be specified on the
                order, and `DELIVERY` requires a `deliveryInfo` value.
              enum:
                - DINE_IN
                - TAKE_OUT
                - DELIVERY
            curbside:
              type: boolean
              description: |
                Indicates whether the dining option has curbside behavior, and allows the guest to
                provide identifying information such as a description of their vehicle.

    Discount:
      type: object
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          description: |
            A discount configured in Toast Web.
            Discounts are always applied before taxes, but after
            service charges are calculated.
          properties:
            name:
              type: string
              description: The human-readable name of the discount.
            active:
              type: boolean
              description: |
                Indicates whether the discount is available and can be
                applied by restaurant employees.
            type:
              type: string
              description: |
                * `PERCENT` - the discount reduces the price by a
                preconfigured percent.
                * `FIXED` - the discount reduces the price by a
                preconfigured currency amount.
                * `OPEN_PERCENT` - the discount reduces the price by a
                percent entered by a restaurant employee.
                * `OPEN_FIXED` - the discount reduces the price by a
                currency amount entered by a restaurant employee.
                * `BOGO` - a buy one get one (BOGO) discount.
                * `FIXED_TOTAL` - a combo discount that reduces the
                price of all eligible items to a preconfigured currency
                amount.
              enum:
                - PERCENT
                - FIXED
                - OPEN_PERCENT
                - OPEN_FIXED
                - BOGO
                - FIXED_TOTAL
            percentage:
              type: number
              format: double
              description: |
                Percent discount applied when the `amountType` is
                `PERCENT`. This value will be greater than 0 and at
                most 100.
            amount:
              type: number
              format: double
              description: |
                The currency amount of the discount when the
                `amountType` is `FIXED`. This value will be greater
                than 0.
            selectionType:
              type: string
              description: |
                * `CHECK` - the discount can be applied to a check.
                * `BOGO` - a buy one get one (BOGO) discount.
                * `ITEM` - the discount can be applied to an item
                selection in a check.
              enum:
                - CHECK
                - ITEM
                - BOGO
            nonExclusive:
              type: boolean
              description: |
                Indicates whether you can apply the discount with other
                discounts. This value is always `false` for item and
                combo discounts. Set this value for check and BOGO
                discounts by selecting **Allow with other discounts** in
                the **Discounts Rules** section of the discounts
                configuration page of Toast Web.
            itemPickingPriority:
              type: string
              description: |
                Indicates which menu item selections are discounted
                when you apply a BOGO discount. An item that is
                discounted by a BOGO discount is a "get" item.

                * `FIRST` - the BOGO discount applies to the first
                matching item selection in the check or the discount is
                not a BOGO discount. The `itemPickingPriority` is
                always `FIRST` for discounts that are not BOGO
                discounts.

                * `LEAST_EXPENSIVE` - the BOGO discount applies
                to the least expensive matching item selection in the check.

                * `MOST_EXPENSIVE` - the BOGO discount applies to the most
                expensive matching item selection in the check.
              enum:
                - FIRST
                - LEAST_EXPENSIVE
                - MOST_EXPENSIVE
            fixedTotal:
              type: number
              format: double
              description: |
                The total price of items discounted by a combo
                discount. This value is `null` for discounts that are
                not combo discounts.

    Printer:
      type: object
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            name:
              type: string
              description: The name of the printer.

    Table:
      type: object
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            name:
              type: string
              description: The name of the table.

    PayoutReason:
      type: object
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            name:
              type: string
              description: The short name of this payout reason.

    PriceGroup:
      type: object
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            name:
              type: string
              description: The name of this price group.

    RestaurantService:
      type: object
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            name:
              type: string
              description: |
                The name of this meal service (for example, `Lunch` or
                `Dinner`).

    RevenueCenter:
      type: object
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          description: A set of ServiceAreas and POS devices for which separate revenue reports can be generated. For instance, a restaurant with a bar might choose to define two RevenueCenters, one for the bar and one for the dining area.
          properties:
            name:
              type: string
              description: The name of this revenue center.
            description:
              type: string
              description: The description of this revenue center.

    SalesCategory:
      type: object
      description: |
        A descriptive category, for example, "Food" or "Liquor" that, when applied to the menu items and modifier options in your menu, allow you to view sales data by category. Null if no sales category has been defined.
      properties:
        name:
          description: |
            A descriptive name for this sales category, for example, "Food" or "Liquor".
          type: string
        guid:
          description: |
            A unique identifier for this sales category, assigned by the Toast POS system.
          type: string

    ServiceArea:
      type: object
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          description: A representation of a physical service area, a group of tables, in a restaurant.
          properties:
            name:
              type: string
              description: The name of this service area.
            revenueCenter:
              description: The revenue center the service area belongs to.
              $ref: "#/components/schemas/ExternalReference"

    ServiceCharge:
      type: object
      allOf:
        - $ref: "#/components/schemas/ExternalReference"
        - type: object
          description: Any charge applied to a check for something other than menu item. Typical examples include gratuity and delivery fees.
          properties:
            name:
              type: string
              description: The name of this service charge.
            amountType:
              type: string
              description: The type of service charge.
              enum:
                - FIXED
                - PERCENT
                - OPEN
            amount:
              type: number
              format: double
              description: Amount in USD to be applied for `FIXED` type service charges.
            percent:
              type: number
              format: double
              description: |
                Percent fee to be applied for `PERCENT` type service
                charges, based on pre-discount check amount. Must be a
                number between 0 and 100.
            criteria:
              description: A reference to the ServiceChargeCriteria to determine if this service charge is applicable to a given check. See each ServiceChargeCriteria for details.
              $ref: "#/components/schemas/ServiceChargeCriteria"
            gratuity:
              type: boolean
              description: True if the service charge is a gratuity and is assigned to the owner of the check.
            taxable:
              type: boolean
              description: True if tax should be applied to the service charge.
            applicableTaxes:
              type: array
              description: A reference to the taxes applied to the service charge, if the service charge is taxable.
              items:
                $ref: "#/components/schemas/TaxRate"
            serviceChargeCalculation:
              type: string
              description: Defines whether or not the service charge is applied before (PRE) or after (POST) discounts. This field is null for non-percent service charges.
              enum:
                - PRE_DISCOUNT
                - POST_DISCOUNT
            destination:
              type: string
              description: |
                Final recipient of the funds from this service charge.

                * `RESTAURANT` - The business owner of the restaurant receives the service charge funds.
                * `SERVER` - Restaurant employees receive the service charge funds e.g. gratuity.
                * `TOAST` - Toast receives the service charge funds.
                * `THIRD_PARTY` - A third party receives the service charge funds e.g. fundraising funds go to charity.
              enum:
                - RESTAURANT
                - SERVER
                - TOAST
                - THIRD_PARTY

    ServiceChargeCriteria:
      type: object
      description: Describes thresholds for when a service charge should be applied to a check.
      properties:
        minCheckAmount:
          type: number
          format: double
          description: The service charge is only applicable if the pre-discount check is at least this amount.
        delivery:
          type: boolean
          description: True if the service charge is only applicable for deliveries.
        maxCheckAmount:
          type: number
          format: double
          description: The service charge is waived if the pre-discount check amount is more than this amount. A `null` value means this criteria is inapplicable.
        minDeliveryDistance:
          type: number
          format: double
          description: The service charge is only applicable to deliveries that are at least this distance. A `null` value means this criteria is inapplicable.
        takeout:
          type: boolean
          description: Indicates whether the service charge is automatically applied to orders that have the takeout dining option behavior.
        dineIn:
          type: boolean
          description: Indicates whether the service charge is applied to orders that have the dine-in dining option behavior.

    TaxRate:
      type: object
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            name:
              type: string
              description: The name of this tax rate.
            isDefault:
              type: boolean
              description: True if this tax rate is the default tax rate.
            rate:
              type: number
              format: double
              description: |
                The tax rate value.

    TipWithholding:
      type: object
      description: |
        Information about the way tip withholding is configured for
        a restaurant. Tip withholding is a percentage of employees'
        credit card tips and service charges that are paid to
        employees as a gratuity that is kept by a restaurant to
        cover credit card processing fees.
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            enabled:
              type: boolean
              description: |
                Indicates whether a restaurant location withholds a percent of
                employees' credit card tips.

                * `true` - the location keeps a percent of employees' credit card
                tips.

                * `false` - the location does not keep a percent of employees'
                credit card tips.
            percentage:
              type: number
              description: |
                The decimal percentage of credit card tips withheld. If tip
                withholding is not `enabled`, tips will not be withheld in the
                Toast platform regardless of this value.

    NoSaleReason:
      type: object
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            name:
              type: string
              description: The name of the no sale reason that appears in the Toast POS.

    VoidReason:
      type: object
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          description: When voiding something through the POS, the user must choose a preconfigured void reason.
          properties:
            name:
              type: string
              description: The name of this void reason.

    MarketplaceFacilitatorTaxInfo:
      type: object
      description: |
        Information about the taxes that a marketplace facilitator
        organization remits on behalf of a Toast platform restaurant.
        `POST` only. The orders API does not include the
        `MarketplaceFacilitatorTaxInfo` object in response data.

        **Note**: you can only include this information if your
        Toast API client is associated with a designated
        marketplace facilitator organization. Most Toast API
        clients do not create marketplace facilitator orders.
      properties:
        facilitatorCollectAndRemitTaxOrder:
          description: |
            Indicates whether a marketplace facilitator organization has
            paid the tax amounts for an order on behalf of the restaurant
            that fulfills the order.

            If you include this value, you indicate that the marketplace
            facilitator order uses the prices and tax amounts calculated
            by the Toast platform.

            If you include this value, you *must not* include the `taxes`
            value and you *must not* include the `externalPriceAmount`
            for menu item selections in the order.
          type: boolean
        taxes:
          description: |
            An array of `AppliedTaxRate` objects that describe the tax
            amounts that apply to a marketplace facilitator order.

            If you include this value, you must include an `externalPriceAmount`
            for each menu item selection in the order.
          type: array
          items:
            $ref: "#/components/schemas/AppliedTaxRate"
    AppliedTaxRate:
      type: object
      description: A tax rate that is applied to an item or service charge.
      required:
        - taxRate
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            entityType:
              description: The type of object this is.
              type: string
            taxRate:
              $ref: "#/components/schemas/ToastReference"
            name:
              type: string
              description: The name of the tax rate.
            rate:
              type: number
              format: double
              description: The tax rate, which can be a fixed amount, a percentage, or null.
            taxAmount:
              type: number
              format: double
              description: The tax amount that was actually applied.
            type:
              type: string
              description: |
                The type of the tax rate. Default is `PERCENT`.

                The value `EXTERNAL` indicates that the tax is for a marketplace
                facilitator order, and that the marketplace facilitator
                organization calculated the tax amount.
              enum:
                - PERCENT
                - FIXED
                - NONE
                - TABLE
                - EXTERNAL
            facilitatorCollectAndRemitTax:
              type: boolean
              description: |
                Indicates whether the marketplace facilitator that
                received a guest order remitted the tax amount on behalf
                of the Toast platform restaurant.

                You can use this information to identify tax amounts that
                have already been paid by an ordering service provider
                and do not need to be paid again.

                * `true` - The marketplace facilitator paid the tax
                amount on behalf of the Toast platform restaurant
                location.

                * `false` - The marketplace facilitator has not paid the
                tax amount. The Toast platform restaurant location may be
                required to pay the tax amount.

                **Note**: Toast API response data is not guidance or
                advice for tax compliance.
            displayName:
              type: string
              description: The name of the tax rate as it appears on guest receipts.
            jurisdiction:
              type: string
              description: The state or province of the tax rate for reporting purposes.
            jurisdictionType:
              type: string
              description: The jurisdiction type (ex. STATE, COUNTY, etc.) of the tax rate for reporting purposes.

    GiftCardInfo:
      type: object
      description: Reserved for future use.
      required:
        - cardNumberIdentifier
        - last4CardDigits
      allOf:
        - $ref: "#/components/schemas/ToastReference"
        - type: object
          properties:
            last4CardDigits:
              type: string
              description: The last 4 digits of the gift card that was used.
            first5CardDigits:
              type: string
              description: The first 5 digits of the gift card that was used. Response only.
    General:
      type: object
      description: General information about a restaurant location.
      properties:
        name:
          type: string
          description: The guest-facing name of the restaurant.
        locationName:
          type: string
          description: A name used externally to differentiate multiple locations.
        locationCode:
          type: string
          description: A code used internally to differentiate multiple locations.
        description:
          type: string
          description: A description of the restaurant.
        timeZone:
          type: string
          description: The name of the restaurant's time zone in the IANA time zone database.
        closeoutHour:
          type: integer
          description: The hour of the day that separates one business day from the next.
        managementGroupGuid:
          type: string
          description: The unique identifier of the restaurant group for the restaurant.
        currencyCode:
          type: string
          description: The ISO-4217 currency code used in this restaurant.
        firstBusinessDate:
          type: integer
          description: The first business date (yyyyMMdd) the restaurant began using Toast.
        archived:
          type: boolean
          description: Returns `true` if the restaurant has been archived from the Toast platform.

    VoidInformation:
      type: object
      description: Information about a void applied to a check or item.
      properties:
        voidUser:
          description: The user who voided the order.
          $ref: "#/components/schemas/ExternalReference"
        voidApprover:
          description: The user who approved the void.
          $ref: "#/components/schemas/ExternalReference"
        voidDate:
          description: The date on which the void was made.
          type: string
          format: date-time
        voidBusinessDate:
          description: The business date (yyyyMMdd) on which the void was made. Response only.
          type: integer
        voidReason:
          description: A reference to the configured void reason for the void.
          $ref: "#/components/schemas/ExternalReference"

    # Menu API reference schemas
    MultiLocationId:
      type: string
      description: |
        An identifier that is used to identify and consolidate menu entities that are versions of each other.

        `multiLocationId` replaces `masterId`. `multiLocationId` and `masterId` always have the same value.

        Menu entities can be versioned. Those versions can be assigned to specific restaurant locations, or groups of locations, in a management group. For example, you could have two versions of a burger, one for a Boston location and another for a New York City location. Versioned menu entities share the majority of, but not all of, their data. For example, the Boston version is called the Minuteman Burger and has pickles, while the New York City version is called the Empire Burger and does not.

        You use the `multiLocationId` to identify menu entities that are versions of each other. To continue the example above, the Minuteman Burger in the JSON returned for the Boston location has the same `multilocationId` as the Empire Burger in the JSON returned for the New York City location. These matching `multlocationId` values indicate that the two items are related versions of the same item. In Toast reports, this allows a restaurant to track sales of the burger across both locations.
    MasterId:
      type: integer
      format: int64
      description: |
        This value is deprecated. Instead of `masterId`, use `multiLocationId`.

        An identifier that is used to identify and consolidate menu entities that are versions of each other.
    PosName:
      type: string
      description: |
        The button label name that appears for this menu entity in the Toast POS app. `posName` contains an empty string if a `posName` has not been defined for the menu entity and the `name` value is used for the button label instead.
    PosButtonColorLight:
      type: string
      description: |
        The color of the menu entity's button on the Toast POS app, when the app is running in light mode.
             
        When an employee configures a POS button's color, they select a color pairing that consists of two colors, one for light mode and one for dark mode. `posButtonColorLight` contains the HEX code for the light mode color.
    PosButtonColorDark:
      type: string
      description: |
        The color of the menu entity's button on the Toast POS app, when the app is running in dark mode.
             
        When an employee configures a POS button's color, they select a color pairing that consists of two colors, one for light mode and one for dark mode. `posButtonColorDark` contains the HEX code for the dark mode color.
    Visibility:
      type: array
      description: |
        An array of strings that indicate where this menu entity is visible:

        * POS: The menu entity is visible in the Toast POS app. 

        * KIOSK: The menu entity is visible on a Toast kiosk. 

        * TOAST_ONLINE_ORDERING: The menu entity is visible in the Toast online
          ordering site for this restaurant. 

        * ORDERING_PARTNERS: The restaurants wants this menu entity to be visible
          on online ordering sites that integrate with the Toast POS system using the orders API. 

        * GRUBHUB: Deprecated. The menu entity is included during a menu sync to
          Grubhub and will be visible on the Grubhub online ordering service after a
          menu sync has completed. _Note:_ Conceptually, the _Grubhub_ configuration
          option that was associated with the `GRUBHUB` string in this array has
          been replaced by the more general _Online orders: Ordering partners_
          configuration option and restaurants that used the _Grubhub_ option have
          been automatically migrated to the new _Online orders: Ordering partners_
          option. This means that any menu entity that had the _Grubhub_ option set
          to _Yes_ will now have the _Online orders: Ordering partners_ option
          enabled and the `ORDERING_PARTNERS` enum will be present in the
          `visibility` array for it. To support backwards compatibility, the
          `visibility` array for these entities will also continue to contain the
          `GRUBHUB` enum for a short period of time. See <a
          href="https://doc.toasttab.com/doc/devguide/apiDeprecatedApiFunctions.html#apiMenuEntityVisibilityEnhancements">Menu
          Visibility Enhancements (Rolled Out)</a> for more information.

        The `visibility` array is empty if the menu entity is not configured to be visible for any of the use cases listed above.
      items:
        type: string
        enum:
          - POS
          - KIOSK
          - GRUBHUB
          - TOAST_ONLINE_ORDERING
          - ORDERING_PARTNERS
    PricingRules:
      type: object
      description: |
        The PricingRules object is a multi-use object that provides pricing rules for:
          * A menu item or modifier option item reference that uses the Time Specific Price or Size Price pricing strategy.
          * A modifier group that uses the Size Price, Sequence Price, or Size/Sequence Price pricing strategy.
      properties:
        timeSpecificPricingRules:
          description: |
            An array of `TimeSpecificPrice` objects that define the time-specific prices for a menu item or modifier option item reference that uses the Time Specific Price pricing strategy. If the menu item or modifier option item reference does not use time-specific prices, this array is empty.
          type: array
          items:
            $ref: "#/components/schemas/TimeSpecificPrice"
        sizeSpecificPricingGuid:
          description: |
            The GUID of a Size modifier group that defines sizes and prices for a menu item or a modifier option item reference that uses the Size Price pricing strategy.
            If the menu item or modifier option item reference does not use the Size Price pricing strategy, then `sizeSpecificPricingGuid` is null.
          type: string
          nullable: true
        sizeSequencePricingRules:
          type: array
          description: |
            An array of `SizeSequencePricingRule` objects that define the prices for the modifier options in a modifier group that uses the Size Price, Sequence Price, or Size/Sequence Pricing pricing strategy. If the modifier group does not use one of these pricing strategies, this array is empty.
          items:
            $ref: "#/components/schemas/SizeSequencePricingRule"
    Availability:
      type: object
      description: |
        Information about when a menu is available for use.
      properties:
        alwaysAvailable:
          type: boolean
          description: |
            Indicates whether this menu is available 24 hours per day, 7 days a week. If `alwaysAvailable` is FALSE, then a `schedule` value is included in the `Availability` object to define the specific times and days a menu is available. If `alwaysAvailable` is TRUE, then the `schedule` value is omitted.
        schedule:
          type: array
          description: |
            An array of `Schedule` objects that indicate the specific days and times a menu is available. If `alwaysAvailable` is TRUE, then the menu is available 24 hours per day, 7 days per week, and this `schedule` value is omitted from the `Availability` object.
          items:
            $ref: "#/components/schemas/Schedule"
    ModifierOptionTaxInfo:
      type: object
      description: |
        Information about the tax rates and tax behavior of this modifier option.
      properties:
        taxRateGuids:
          type: array
          description: |
            An array of GUIDs for the tax rates that apply to this modifier option.
          items:
            type: string
    ItemTag:
      type: object
      description: |
        Information about an item tag that can be assigned to menu items and modifier options.
      properties:
        guid:
          type: string
          description: A unique identifier for this item tag.
        name:
          type: string
          description: The name of this item tag.
    ContentAdvisories:
      type: object
      description: |
        Information about the contents of this menu item or modifier, for example, whether it contains alcohol.
      properties:
        alcohol:
          $ref: "#/components/schemas/Alcohol"
    Alcohol:
      type: object
      description: |
        Information about whether this menu item or modifier contains alcohol and may require, 
        or benefit from, additional handling. For example, a delivery partner may need 
        to identify a menu item or modifier as containing alcohol to ensure that delivery drivers
        request identification before giving it to a customer.
      properties:
        containsAlcohol:
          type: string
          nullable: true
          description: |
            A string that indicates whether the menu item or modifier contains alcohol. Possible values 
            include:

            * `YES`: The menu item or modifier contains alcohol.
            * `NO`: The menu item or modifier does not contain alcohol.
                 
            The `containsAlcohol` value may also be `null`. A `null` value indicates that the corresponding UI option in Toast Web has not been configured for this menu item or modifier.
          enum:
            - "YES"
            - "NO"
    Portion:
      type: object
      description: |
        Information about a portion that can be defined for menu items and modifier options.
      properties:
        guid:
          type: string
          description: A unique identifier for this portion.
        name:
          type: string
          description: The name of this portion.
    Length:
      type: number
      format: float
      nullable: true
      description: |
        The length of the item or modifier. Use the `dimensionUnitOfMeasure` value to determine the unit of measurement.

        The `length` value is `null` if no length is specified for the item or modifier.

        You can use the `length`, `height`, and `width` values to determine the overall size of the item or modifier. This information is useful, for example, when determining shipping costs or choosing the size of delivery vehicle to use.
    Height:
      type: number
      format: float
      nullable: true
      description: |
        The height of the item or modifier. Use the `dimensionUnitOfMeasure` value to determine the unit of measurement.

        The `height` value is `null` if no height is specified for the item or modifier.

        You can use the `length`, `height`, and `width` values to determine the overall size of the item or modifier. This information is useful, for example, when determining shipping costs or choosing the size of delivery vehicle to use.
    Width:
      type: number
      format: float
      nullable: true
      description: |
        The width of the item or modifier. Use the `dimensionUnitOfMeasure` value to determine the unit of measurement.

        The `width` value is `null` if no width is specified for the item or modifier.

        You can use the `length`, `height`, and `width` values to determine the overall size of the item or modifier. This information is useful, for example, when determining shipping costs or choosing the size of delivery vehicle to use.
    DimensionUnitOfMeasure:
      type: string
      enum:
        - IN
        - CM
        - FT
        - M
        - MM
        - YD
      description: |
        The unit of measure assigned to the `length`, `height`, and `width` values.
    Weight:
      type: number
      format: float
      nullable: true
      description: |
        The weight of the item or modifier. Use the `weightUnitOfMeasure` value to determine the unit of measurement.

        The `weight` value is `null` if no weight is specified for the item or modifier.
            
        You can use the `weight` value when determining shipping costs or choosing a delivery vehicle to use.
    WeightUnitOfMeasure:
      type: string
      enum:
        - NONE
        - LB
        - OZ
        - KG
        - G
      description: |
        The unit of measure assigned to the `weight` value.
    Images:
      type: array
      description: |
        An array of strings that contain URLs for images that have been uploaded for this item or modifier. The array is empty if no images have been uploaded.
            
        _Note:_ The `images` array contains multiple URLs for multiple images for the same item or modifier. The older `image` value contains a single URL for a single image.
      items:
        type: string
    GuestCount:
      type: number
      format: float
      nullable: true
      description: |
        The number of guests the item or modifier is expected to serve. This value is `null` if no guest count is specified.
    TimeSpecificPrice:
      type: object
      description: |
        Represents the pricing rules for a menu item that uses a time-specific price.
      properties:
        timeSpecificPrice:
          type: number
          format: double
          description: |
            The price of the menu item during the periods of time defined by the associated `schedule` array.
        basePrice:
          type: number
          format: double
          description: |
            The base price of the menu item, used for time periods when a time-specific price has not been defined.
        schedule:
          type: array
          description: |
            An array of `Schedule` objects that indicate the specific days and times that a time-specific price is available.
          items:
            $ref: "#/components/schemas/Schedule"
    Schedule:
      type: object
      description: |
        A multi-use object that is used to:

        * Define when a menu is available.
        * Define when a time-specific price is available for a menu item or modifier option.

        A `Schedule` object defines a set of days of the week and a set of time ranges for those days. Days that have identical time ranges are grouped into a single `Schedule` object.

        Time ranges are in 24-hour HH:MM format.

        If a day is not represented in the `Schedule` objects, the menu or time-specific price is not available on that day.
      properties:
        days:
          type: array
          description: |
            An array of strings that represent the days of the week when this schedule is active.
          items:
            type: string
            enum:
              - SUNDAY
              - MONDAY
              - TUESDAY
              - WEDNESDAY
              - THURSDAY
              - FRIDAY
              - SATURDAY
        timeRanges:
          type: array
          description: |
            An array of time range objects that define the specific time periods for the days specified in the `days` array.
          items:
            $ref: "#/components/schemas/TimeRange"
    TimeRange:
      type: object
      description: |
        Defines a time range with start and end times in 24-hour HH:MM format.
      properties:
        start:
          type: string
          description: |
            The start time in 24-hour HH:MM format (e.g., "09:00").
        end:
          type: string
          description: |
            The end time in 24-hour HH:MM format (e.g., "18:00").
    SizeSequencePricingRule:
      type: object
      description: |
        A multi-use object that defines the pricing rules for modifier options that belong to a modifier group that uses the Size Price, Sequence Price, or Size/Sequence Price pricing strategy. The contents of this object depend on the pricing strategy that is in effect.
      properties:
        sizeName:
          type: string
          nullable: true
          description: |
            A string that represents the size of a modifier option in this modifier group, for example, Small, Medium, or Large.

            With Size Price and the Size/Sequence Price pricing strategies, the price of a modifier option changes based on the size of the menu item it is applied to. The `sizeName` value is null if the modifier group uses the Sequence Price pricing strategy because this strategy does not use sizes.
        sizeGuid:
          type: string
          nullable: true
          description: |
            The GUID of the modifier option where a menu item size has been defined that matches the `sizeName` value. The `sizeGuid` value is null if the modifier group uses the Sequence Price pricing strategy because this strategy does not use sizes.
        sequencePrices:
          type: array
          description: |
            An array of `SequencePrice` objects that define the size, sequence, or size/sequence prices for the modifier options in this modifier group.
          items:
            $ref: "#/components/schemas/SequencePrice"
    SequencePrice:
      type: object
      description: |
        Defines pricing based on sequence for modifier options in a modifier group.
      properties:
        sequence:
          type: integer
          description: |
            The sequence number for this pricing rule.
        price:
          type: number
          format: double
          description: |
            The price for modifier options at this sequence position.
